package com.changtai.sqlModelDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.changtai.sqlModel.PurchaseRecordModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PURCHASE_RECORD_MODEL".
*/
public class PurchaseRecordModelDao extends AbstractDao<PurchaseRecordModel, Long> {

    public static final String TABLENAME = "PURCHASE_RECORD_MODEL";

    /**
     * Properties of entity PurchaseRecordModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property PurchaseRecordId = new Property(1, String.class, "PurchaseRecordId", false, "PURCHASE_RECORD_ID");
        public final static Property DeviceNo = new Property(2, String.class, "DeviceNo", false, "DEVICE_NO");
        public final static Property StationNo = new Property(3, String.class, "StationNo", false, "STATION_NO");
        public final static Property UserName = new Property(4, String.class, "UserName", false, "USER_NAME");
        public final static Property UserNo = new Property(5, String.class, "UserNo", false, "USER_NO");
        public final static Property PurchaseTotalThisTime = new Property(6, String.class, "PurchaseTotalThisTime", false, "PURCHASE_TOTAL_THIS_TIME");
        public final static Property PurchaseaMountThisTime = new Property(7, String.class, "PurchaseaMountThisTime", false, "PURCHASEA_MOUNT_THIS_TIME");
        public final static Property PurchaseDatetimeThisTime = new Property(8, java.util.Date.class, "PurchaseDatetimeThisTime", false, "PURCHASE_DATETIME_THIS_TIME");
        public final static Property PurchaseYear = new Property(9, Integer.class, "PurchaseYear", false, "PURCHASE_YEAR");
        public final static Property PurchaseTotalThisYear = new Property(10, String.class, "PurchaseTotalThisYear", false, "PURCHASE_TOTAL_THIS_YEAR");
        public final static Property PurchaseTotal = new Property(11, String.class, "PurchaseTotal", false, "PURCHASE_TOTAL");
        public final static Property PriceSj1 = new Property(12, String.class, "PriceSj1", false, "PRICE_SJ1");
        public final static Property TotalSj1 = new Property(13, String.class, "TotalSj1", false, "TOTAL_SJ1");
        public final static Property AmountSj1 = new Property(14, String.class, "AmountSj1", false, "AMOUNT_SJ1");
        public final static Property PriceSj2 = new Property(15, String.class, "PriceSj2", false, "PRICE_SJ2");
        public final static Property TotalSj2 = new Property(16, String.class, "TotalSj2", false, "TOTAL_SJ2");
        public final static Property AmountSj2 = new Property(17, String.class, "AmountSj2", false, "AMOUNT_SJ2");
        public final static Property PriceSj3 = new Property(18, String.class, "PriceSj3", false, "PRICE_SJ3");
        public final static Property TotalSj3 = new Property(19, String.class, "TotalSj3", false, "TOTAL_SJ3");
        public final static Property AmountSj3 = new Property(20, String.class, "AmountSj3", false, "AMOUNT_SJ3");
        public final static Property Comment = new Property(21, String.class, "Comment", false, "COMMENT");
        public final static Property AdministratorName = new Property(22, String.class, "AdministratorName", false, "ADMINISTRATOR_NAME");
        public final static Property ServerVersion = new Property(23, long.class, "ServerVersion", false, "SERVER_VERSION");
        public final static Property ClientVersion = new Property(24, long.class, "ClientVersion", false, "CLIENT_VERSION");
        public final static Property Key = new Property(25, int.class, "key", false, "KEY");
    }


    public PurchaseRecordModelDao(DaoConfig config) {
        super(config);
    }
    
    public PurchaseRecordModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PURCHASE_RECORD_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"PURCHASE_RECORD_ID\" TEXT," + // 1: PurchaseRecordId
                "\"DEVICE_NO\" TEXT," + // 2: DeviceNo
                "\"STATION_NO\" TEXT," + // 3: StationNo
                "\"USER_NAME\" TEXT," + // 4: UserName
                "\"USER_NO\" TEXT," + // 5: UserNo
                "\"PURCHASE_TOTAL_THIS_TIME\" TEXT," + // 6: PurchaseTotalThisTime
                "\"PURCHASEA_MOUNT_THIS_TIME\" TEXT," + // 7: PurchaseaMountThisTime
                "\"PURCHASE_DATETIME_THIS_TIME\" INTEGER," + // 8: PurchaseDatetimeThisTime
                "\"PURCHASE_YEAR\" INTEGER," + // 9: PurchaseYear
                "\"PURCHASE_TOTAL_THIS_YEAR\" TEXT," + // 10: PurchaseTotalThisYear
                "\"PURCHASE_TOTAL\" TEXT," + // 11: PurchaseTotal
                "\"PRICE_SJ1\" TEXT," + // 12: PriceSj1
                "\"TOTAL_SJ1\" TEXT," + // 13: TotalSj1
                "\"AMOUNT_SJ1\" TEXT," + // 14: AmountSj1
                "\"PRICE_SJ2\" TEXT," + // 15: PriceSj2
                "\"TOTAL_SJ2\" TEXT," + // 16: TotalSj2
                "\"AMOUNT_SJ2\" TEXT," + // 17: AmountSj2
                "\"PRICE_SJ3\" TEXT," + // 18: PriceSj3
                "\"TOTAL_SJ3\" TEXT," + // 19: TotalSj3
                "\"AMOUNT_SJ3\" TEXT," + // 20: AmountSj3
                "\"COMMENT\" TEXT," + // 21: Comment
                "\"ADMINISTRATOR_NAME\" TEXT," + // 22: AdministratorName
                "\"SERVER_VERSION\" INTEGER NOT NULL ," + // 23: ServerVersion
                "\"CLIENT_VERSION\" INTEGER NOT NULL ," + // 24: ClientVersion
                "\"KEY\" INTEGER NOT NULL );"); // 25: key
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PURCHASE_RECORD_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PurchaseRecordModel entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String PurchaseRecordId = entity.getPurchaseRecordId();
        if (PurchaseRecordId != null) {
            stmt.bindString(2, PurchaseRecordId);
        }
 
        String DeviceNo = entity.getDeviceNo();
        if (DeviceNo != null) {
            stmt.bindString(3, DeviceNo);
        }
 
        String StationNo = entity.getStationNo();
        if (StationNo != null) {
            stmt.bindString(4, StationNo);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(5, UserName);
        }
 
        String UserNo = entity.getUserNo();
        if (UserNo != null) {
            stmt.bindString(6, UserNo);
        }
 
        String PurchaseTotalThisTime = entity.getPurchaseTotalThisTime();
        if (PurchaseTotalThisTime != null) {
            stmt.bindString(7, PurchaseTotalThisTime);
        }
 
        String PurchaseaMountThisTime = entity.getPurchaseaMountThisTime();
        if (PurchaseaMountThisTime != null) {
            stmt.bindString(8, PurchaseaMountThisTime);
        }
 
        java.util.Date PurchaseDatetimeThisTime = entity.getPurchaseDatetimeThisTime();
        if (PurchaseDatetimeThisTime != null) {
            stmt.bindLong(9, PurchaseDatetimeThisTime.getTime());
        }
 
        Integer PurchaseYear = entity.getPurchaseYear();
        if (PurchaseYear != null) {
            stmt.bindLong(10, PurchaseYear);
        }
 
        String PurchaseTotalThisYear = entity.getPurchaseTotalThisYear();
        if (PurchaseTotalThisYear != null) {
            stmt.bindString(11, PurchaseTotalThisYear);
        }
 
        String PurchaseTotal = entity.getPurchaseTotal();
        if (PurchaseTotal != null) {
            stmt.bindString(12, PurchaseTotal);
        }
 
        String PriceSj1 = entity.getPriceSj1();
        if (PriceSj1 != null) {
            stmt.bindString(13, PriceSj1);
        }
 
        String TotalSj1 = entity.getTotalSj1();
        if (TotalSj1 != null) {
            stmt.bindString(14, TotalSj1);
        }
 
        String AmountSj1 = entity.getAmountSj1();
        if (AmountSj1 != null) {
            stmt.bindString(15, AmountSj1);
        }
 
        String PriceSj2 = entity.getPriceSj2();
        if (PriceSj2 != null) {
            stmt.bindString(16, PriceSj2);
        }
 
        String TotalSj2 = entity.getTotalSj2();
        if (TotalSj2 != null) {
            stmt.bindString(17, TotalSj2);
        }
 
        String AmountSj2 = entity.getAmountSj2();
        if (AmountSj2 != null) {
            stmt.bindString(18, AmountSj2);
        }
 
        String PriceSj3 = entity.getPriceSj3();
        if (PriceSj3 != null) {
            stmt.bindString(19, PriceSj3);
        }
 
        String TotalSj3 = entity.getTotalSj3();
        if (TotalSj3 != null) {
            stmt.bindString(20, TotalSj3);
        }
 
        String AmountSj3 = entity.getAmountSj3();
        if (AmountSj3 != null) {
            stmt.bindString(21, AmountSj3);
        }
 
        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(22, Comment);
        }
 
        String AdministratorName = entity.getAdministratorName();
        if (AdministratorName != null) {
            stmt.bindString(23, AdministratorName);
        }
        stmt.bindLong(24, entity.getServerVersion());
        stmt.bindLong(25, entity.getClientVersion());
        stmt.bindLong(26, entity.getKey());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PurchaseRecordModel entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String PurchaseRecordId = entity.getPurchaseRecordId();
        if (PurchaseRecordId != null) {
            stmt.bindString(2, PurchaseRecordId);
        }
 
        String DeviceNo = entity.getDeviceNo();
        if (DeviceNo != null) {
            stmt.bindString(3, DeviceNo);
        }
 
        String StationNo = entity.getStationNo();
        if (StationNo != null) {
            stmt.bindString(4, StationNo);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(5, UserName);
        }
 
        String UserNo = entity.getUserNo();
        if (UserNo != null) {
            stmt.bindString(6, UserNo);
        }
 
        String PurchaseTotalThisTime = entity.getPurchaseTotalThisTime();
        if (PurchaseTotalThisTime != null) {
            stmt.bindString(7, PurchaseTotalThisTime);
        }
 
        String PurchaseaMountThisTime = entity.getPurchaseaMountThisTime();
        if (PurchaseaMountThisTime != null) {
            stmt.bindString(8, PurchaseaMountThisTime);
        }
 
        java.util.Date PurchaseDatetimeThisTime = entity.getPurchaseDatetimeThisTime();
        if (PurchaseDatetimeThisTime != null) {
            stmt.bindLong(9, PurchaseDatetimeThisTime.getTime());
        }
 
        Integer PurchaseYear = entity.getPurchaseYear();
        if (PurchaseYear != null) {
            stmt.bindLong(10, PurchaseYear);
        }
 
        String PurchaseTotalThisYear = entity.getPurchaseTotalThisYear();
        if (PurchaseTotalThisYear != null) {
            stmt.bindString(11, PurchaseTotalThisYear);
        }
 
        String PurchaseTotal = entity.getPurchaseTotal();
        if (PurchaseTotal != null) {
            stmt.bindString(12, PurchaseTotal);
        }
 
        String PriceSj1 = entity.getPriceSj1();
        if (PriceSj1 != null) {
            stmt.bindString(13, PriceSj1);
        }
 
        String TotalSj1 = entity.getTotalSj1();
        if (TotalSj1 != null) {
            stmt.bindString(14, TotalSj1);
        }
 
        String AmountSj1 = entity.getAmountSj1();
        if (AmountSj1 != null) {
            stmt.bindString(15, AmountSj1);
        }
 
        String PriceSj2 = entity.getPriceSj2();
        if (PriceSj2 != null) {
            stmt.bindString(16, PriceSj2);
        }
 
        String TotalSj2 = entity.getTotalSj2();
        if (TotalSj2 != null) {
            stmt.bindString(17, TotalSj2);
        }
 
        String AmountSj2 = entity.getAmountSj2();
        if (AmountSj2 != null) {
            stmt.bindString(18, AmountSj2);
        }
 
        String PriceSj3 = entity.getPriceSj3();
        if (PriceSj3 != null) {
            stmt.bindString(19, PriceSj3);
        }
 
        String TotalSj3 = entity.getTotalSj3();
        if (TotalSj3 != null) {
            stmt.bindString(20, TotalSj3);
        }
 
        String AmountSj3 = entity.getAmountSj3();
        if (AmountSj3 != null) {
            stmt.bindString(21, AmountSj3);
        }
 
        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(22, Comment);
        }
 
        String AdministratorName = entity.getAdministratorName();
        if (AdministratorName != null) {
            stmt.bindString(23, AdministratorName);
        }
        stmt.bindLong(24, entity.getServerVersion());
        stmt.bindLong(25, entity.getClientVersion());
        stmt.bindLong(26, entity.getKey());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PurchaseRecordModel readEntity(Cursor cursor, int offset) {
        PurchaseRecordModel entity = new PurchaseRecordModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PurchaseRecordId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DeviceNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // StationNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // UserName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // UserNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // PurchaseTotalThisTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // PurchaseaMountThisTime
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // PurchaseDatetimeThisTime
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // PurchaseYear
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // PurchaseTotalThisYear
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // PurchaseTotal
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // PriceSj1
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // TotalSj1
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // AmountSj1
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // PriceSj2
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // TotalSj2
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // AmountSj2
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // PriceSj3
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // TotalSj3
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // AmountSj3
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // Comment
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // AdministratorName
            cursor.getLong(offset + 23), // ServerVersion
            cursor.getLong(offset + 24), // ClientVersion
            cursor.getInt(offset + 25) // key
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PurchaseRecordModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPurchaseRecordId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStationNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPurchaseTotalThisTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPurchaseaMountThisTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPurchaseDatetimeThisTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setPurchaseYear(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setPurchaseTotalThisYear(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPurchaseTotal(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPriceSj1(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTotalSj1(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAmountSj1(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPriceSj2(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTotalSj2(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAmountSj2(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPriceSj3(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTotalSj3(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAmountSj3(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setComment(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setAdministratorName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setServerVersion(cursor.getLong(offset + 23));
        entity.setClientVersion(cursor.getLong(offset + 24));
        entity.setKey(cursor.getInt(offset + 25));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PurchaseRecordModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PurchaseRecordModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PurchaseRecordModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
