package com.changtai.sqlModelDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.changtai.sqlModel.UserModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_MODEL".
*/
public class UserModelDao extends AbstractDao<UserModel, Long> {

    public static final String TABLENAME = "USER_MODEL";

    /**
     * Properties of entity UserModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property UserNo = new Property(1, String.class, "UserNo", false, "USER_NO");
        public final static Property StationNo = new Property(2, String.class, "StationNo", false, "STATION_NO");
        public final static Property DeviceNo = new Property(3, String.class, "DeviceNo", false, "DEVICE_NO");
        public final static Property Index = new Property(4, Integer.class, "Index", false, "INDEX");
        public final static Property UserName = new Property(5, String.class, "UserName", false, "USER_NAME");
        public final static Property Phone = new Property(6, String.class, "Phone", false, "PHONE");
        public final static Property CreateDatetime = new Property(7, java.util.Date.class, "CreateDatetime", false, "CREATE_DATETIME");
        public final static Property Linkman = new Property(8, String.class, "Linkman", false, "LINKMAN");
        public final static Property SjId = new Property(9, Integer.class, "SjId", false, "SJ_ID");
        public final static Property UsedTotal = new Property(10, String.class, "UsedTotal", false, "USED_TOTAL");
        public final static Property PurchaseTotal = new Property(11, String.class, "PurchaseTotal", false, "PURCHASE_TOTAL");
        public final static Property PurchaseTotalThisYear = new Property(12, String.class, "PurchaseTotalThisYear", false, "PURCHASE_TOTAL_THIS_YEAR");
        public final static Property Overdraft = new Property(13, String.class, "Overdraft", false, "OVERDRAFT");
        public final static Property AlarmValue = new Property(14, String.class, "AlarmValue", false, "ALARM_VALUE");
        public final static Property CredentialNo = new Property(15, String.class, "CredentialNo", false, "CREDENTIAL_NO");
        public final static Property LimitSj1 = new Property(16, String.class, "LimitSj1", false, "LIMIT_SJ1");
        public final static Property LimitSj2 = new Property(17, String.class, "LimitSj2", false, "LIMIT_SJ2");
        public final static Property Comment = new Property(18, String.class, "Comment", false, "COMMENT");
        public final static Property AdministratorName = new Property(19, String.class, "AdministratorName", false, "ADMINISTRATOR_NAME");
        public final static Property StopFlag = new Property(20, boolean.class, "StopFlag", false, "STOP_FLAG");
        public final static Property CardNo = new Property(21, String.class, "CardNo", false, "CARD_NO");
        public final static Property CreditcardTimes = new Property(22, Integer.class, "CreditcardTimes", false, "CREDITCARD_TIMES");
        public final static Property LastDatetime = new Property(23, java.util.Date.class, "LastDatetime", false, "LAST_DATETIME");
        public final static Property DelFlag = new Property(24, boolean.class, "DelFlag", false, "DEL_FLAG");
        public final static Property Key = new Property(25, int.class, "key", false, "KEY");
        public final static Property ServerVersion = new Property(26, long.class, "ServerVersion", false, "SERVER_VERSION");
        public final static Property ClientVersion = new Property(27, long.class, "ClientVersion", false, "CLIENT_VERSION");
    }


    public UserModelDao(DaoConfig config) {
        super(config);
    }
    
    public UserModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"USER_NO\" TEXT," + // 1: UserNo
                "\"STATION_NO\" TEXT," + // 2: StationNo
                "\"DEVICE_NO\" TEXT," + // 3: DeviceNo
                "\"INDEX\" INTEGER," + // 4: Index
                "\"USER_NAME\" TEXT," + // 5: UserName
                "\"PHONE\" TEXT," + // 6: Phone
                "\"CREATE_DATETIME\" INTEGER," + // 7: CreateDatetime
                "\"LINKMAN\" TEXT," + // 8: Linkman
                "\"SJ_ID\" INTEGER," + // 9: SjId
                "\"USED_TOTAL\" TEXT," + // 10: UsedTotal
                "\"PURCHASE_TOTAL\" TEXT," + // 11: PurchaseTotal
                "\"PURCHASE_TOTAL_THIS_YEAR\" TEXT," + // 12: PurchaseTotalThisYear
                "\"OVERDRAFT\" TEXT," + // 13: Overdraft
                "\"ALARM_VALUE\" TEXT," + // 14: AlarmValue
                "\"CREDENTIAL_NO\" TEXT," + // 15: CredentialNo
                "\"LIMIT_SJ1\" TEXT," + // 16: LimitSj1
                "\"LIMIT_SJ2\" TEXT," + // 17: LimitSj2
                "\"COMMENT\" TEXT," + // 18: Comment
                "\"ADMINISTRATOR_NAME\" TEXT," + // 19: AdministratorName
                "\"STOP_FLAG\" INTEGER NOT NULL ," + // 20: StopFlag
                "\"CARD_NO\" TEXT," + // 21: CardNo
                "\"CREDITCARD_TIMES\" INTEGER," + // 22: CreditcardTimes
                "\"LAST_DATETIME\" INTEGER," + // 23: LastDatetime
                "\"DEL_FLAG\" INTEGER NOT NULL ," + // 24: DelFlag
                "\"KEY\" INTEGER NOT NULL ," + // 25: key
                "\"SERVER_VERSION\" INTEGER NOT NULL ," + // 26: ServerVersion
                "\"CLIENT_VERSION\" INTEGER NOT NULL );"); // 27: ClientVersion
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserModel entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String UserNo = entity.getUserNo();
        if (UserNo != null) {
            stmt.bindString(2, UserNo);
        }
 
        String StationNo = entity.getStationNo();
        if (StationNo != null) {
            stmt.bindString(3, StationNo);
        }
 
        String DeviceNo = entity.getDeviceNo();
        if (DeviceNo != null) {
            stmt.bindString(4, DeviceNo);
        }
 
        Integer Index = entity.getIndex();
        if (Index != null) {
            stmt.bindLong(5, Index);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(6, UserName);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(7, Phone);
        }
 
        java.util.Date CreateDatetime = entity.getCreateDatetime();
        if (CreateDatetime != null) {
            stmt.bindLong(8, CreateDatetime.getTime());
        }
 
        String Linkman = entity.getLinkman();
        if (Linkman != null) {
            stmt.bindString(9, Linkman);
        }
 
        Integer SjId = entity.getSjId();
        if (SjId != null) {
            stmt.bindLong(10, SjId);
        }
 
        String UsedTotal = entity.getUsedTotal();
        if (UsedTotal != null) {
            stmt.bindString(11, UsedTotal);
        }
 
        String PurchaseTotal = entity.getPurchaseTotal();
        if (PurchaseTotal != null) {
            stmt.bindString(12, PurchaseTotal);
        }
 
        String PurchaseTotalThisYear = entity.getPurchaseTotalThisYear();
        if (PurchaseTotalThisYear != null) {
            stmt.bindString(13, PurchaseTotalThisYear);
        }
 
        String Overdraft = entity.getOverdraft();
        if (Overdraft != null) {
            stmt.bindString(14, Overdraft);
        }
 
        String AlarmValue = entity.getAlarmValue();
        if (AlarmValue != null) {
            stmt.bindString(15, AlarmValue);
        }
 
        String CredentialNo = entity.getCredentialNo();
        if (CredentialNo != null) {
            stmt.bindString(16, CredentialNo);
        }
 
        String LimitSj1 = entity.getLimitSj1();
        if (LimitSj1 != null) {
            stmt.bindString(17, LimitSj1);
        }
 
        String LimitSj2 = entity.getLimitSj2();
        if (LimitSj2 != null) {
            stmt.bindString(18, LimitSj2);
        }
 
        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(19, Comment);
        }
 
        String AdministratorName = entity.getAdministratorName();
        if (AdministratorName != null) {
            stmt.bindString(20, AdministratorName);
        }
        stmt.bindLong(21, entity.getStopFlag() ? 1L: 0L);
 
        String CardNo = entity.getCardNo();
        if (CardNo != null) {
            stmt.bindString(22, CardNo);
        }
 
        Integer CreditcardTimes = entity.getCreditcardTimes();
        if (CreditcardTimes != null) {
            stmt.bindLong(23, CreditcardTimes);
        }
 
        java.util.Date LastDatetime = entity.getLastDatetime();
        if (LastDatetime != null) {
            stmt.bindLong(24, LastDatetime.getTime());
        }
        stmt.bindLong(25, entity.getDelFlag() ? 1L: 0L);
        stmt.bindLong(26, entity.getKey());
        stmt.bindLong(27, entity.getServerVersion());
        stmt.bindLong(28, entity.getClientVersion());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserModel entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String UserNo = entity.getUserNo();
        if (UserNo != null) {
            stmt.bindString(2, UserNo);
        }
 
        String StationNo = entity.getStationNo();
        if (StationNo != null) {
            stmt.bindString(3, StationNo);
        }
 
        String DeviceNo = entity.getDeviceNo();
        if (DeviceNo != null) {
            stmt.bindString(4, DeviceNo);
        }
 
        Integer Index = entity.getIndex();
        if (Index != null) {
            stmt.bindLong(5, Index);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(6, UserName);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(7, Phone);
        }
 
        java.util.Date CreateDatetime = entity.getCreateDatetime();
        if (CreateDatetime != null) {
            stmt.bindLong(8, CreateDatetime.getTime());
        }
 
        String Linkman = entity.getLinkman();
        if (Linkman != null) {
            stmt.bindString(9, Linkman);
        }
 
        Integer SjId = entity.getSjId();
        if (SjId != null) {
            stmt.bindLong(10, SjId);
        }
 
        String UsedTotal = entity.getUsedTotal();
        if (UsedTotal != null) {
            stmt.bindString(11, UsedTotal);
        }
 
        String PurchaseTotal = entity.getPurchaseTotal();
        if (PurchaseTotal != null) {
            stmt.bindString(12, PurchaseTotal);
        }
 
        String PurchaseTotalThisYear = entity.getPurchaseTotalThisYear();
        if (PurchaseTotalThisYear != null) {
            stmt.bindString(13, PurchaseTotalThisYear);
        }
 
        String Overdraft = entity.getOverdraft();
        if (Overdraft != null) {
            stmt.bindString(14, Overdraft);
        }
 
        String AlarmValue = entity.getAlarmValue();
        if (AlarmValue != null) {
            stmt.bindString(15, AlarmValue);
        }
 
        String CredentialNo = entity.getCredentialNo();
        if (CredentialNo != null) {
            stmt.bindString(16, CredentialNo);
        }
 
        String LimitSj1 = entity.getLimitSj1();
        if (LimitSj1 != null) {
            stmt.bindString(17, LimitSj1);
        }
 
        String LimitSj2 = entity.getLimitSj2();
        if (LimitSj2 != null) {
            stmt.bindString(18, LimitSj2);
        }
 
        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(19, Comment);
        }
 
        String AdministratorName = entity.getAdministratorName();
        if (AdministratorName != null) {
            stmt.bindString(20, AdministratorName);
        }
        stmt.bindLong(21, entity.getStopFlag() ? 1L: 0L);
 
        String CardNo = entity.getCardNo();
        if (CardNo != null) {
            stmt.bindString(22, CardNo);
        }
 
        Integer CreditcardTimes = entity.getCreditcardTimes();
        if (CreditcardTimes != null) {
            stmt.bindLong(23, CreditcardTimes);
        }
 
        java.util.Date LastDatetime = entity.getLastDatetime();
        if (LastDatetime != null) {
            stmt.bindLong(24, LastDatetime.getTime());
        }
        stmt.bindLong(25, entity.getDelFlag() ? 1L: 0L);
        stmt.bindLong(26, entity.getKey());
        stmt.bindLong(27, entity.getServerVersion());
        stmt.bindLong(28, entity.getClientVersion());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserModel readEntity(Cursor cursor, int offset) {
        UserModel entity = new UserModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UserNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // StationNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DeviceNo
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Index
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // UserName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Phone
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // CreateDatetime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Linkman
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // SjId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // UsedTotal
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // PurchaseTotal
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // PurchaseTotalThisYear
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // Overdraft
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // AlarmValue
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // CredentialNo
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // LimitSj1
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // LimitSj2
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // Comment
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // AdministratorName
            cursor.getShort(offset + 20) != 0, // StopFlag
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // CardNo
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // CreditcardTimes
            cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)), // LastDatetime
            cursor.getShort(offset + 24) != 0, // DelFlag
            cursor.getInt(offset + 25), // key
            cursor.getLong(offset + 26), // ServerVersion
            cursor.getLong(offset + 27) // ClientVersion
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStationNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIndex(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateDatetime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setLinkman(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSjId(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setUsedTotal(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPurchaseTotal(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPurchaseTotalThisYear(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOverdraft(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAlarmValue(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCredentialNo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLimitSj1(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLimitSj2(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setComment(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAdministratorName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setStopFlag(cursor.getShort(offset + 20) != 0);
        entity.setCardNo(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCreditcardTimes(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setLastDatetime(cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)));
        entity.setDelFlag(cursor.getShort(offset + 24) != 0);
        entity.setKey(cursor.getInt(offset + 25));
        entity.setServerVersion(cursor.getLong(offset + 26));
        entity.setClientVersion(cursor.getLong(offset + 27));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
