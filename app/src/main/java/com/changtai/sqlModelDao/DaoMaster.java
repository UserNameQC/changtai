package com.changtai.sqlModelDao;

import android.content.Context;
import android.content.ContextWrapper;
import android.database.DatabaseErrorHandler;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;

import java.io.File;
import java.io.IOException;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        CardReeplacementModelDao.createTable(db, ifNotExists);
        ConfigModelDao.createTable(db, ifNotExists);
        DBEntityModelDao.createTable(db, ifNotExists);
        DeviceModelDao.createTable(db, ifNotExists);
        LoginInformationModelDao.createTable(db, ifNotExists);
        LoginModelDao.createTable(db, ifNotExists);
        PriceModelDao.createTable(db, ifNotExists);
        PurchaseRecordModelDao.createTable(db, ifNotExists);
        UserModelDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        CardReeplacementModelDao.dropTable(db, ifExists);
        ConfigModelDao.dropTable(db, ifExists);
        DBEntityModelDao.dropTable(db, ifExists);
        DeviceModelDao.dropTable(db, ifExists);
        LoginInformationModelDao.dropTable(db, ifExists);
        LoginModelDao.dropTable(db, ifExists);
        PriceModelDao.dropTable(db, ifExists);
        PurchaseRecordModelDao.dropTable(db, ifExists);
        UserModelDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name, null).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(CardReeplacementModelDao.class);
        registerDaoClass(ConfigModelDao.class);
        registerDaoClass(DBEntityModelDao.class);
        registerDaoClass(DeviceModelDao.class);
        registerDaoClass(LoginInformationModelDao.class);
        registerDaoClass(LoginModelDao.class);
        registerDaoClass(PriceModelDao.class);
        registerDaoClass(PurchaseRecordModelDao.class);
        registerDaoClass(UserModelDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        /*public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }*/

        public OpenHelper(Context context, String name, CursorFactory factory) {
            //super(context, name, factory, SCHEMA_VERSION);
            super(new ContextWrapper(context){
                @Override
                public File getDatabasePath(String name) {
                    // 判断是否存在sd卡
                    boolean sdExist = android.os.Environment.MEDIA_MOUNTED.equals(android.os.Environment.getExternalStorageState());
                    if (!sdExist) {// 如果不存在,
                        Log.e("SD卡管理：", "SD卡不存在，请加载SD卡");
                        return null;
                    } else {// 如果存在
                        // 获取sd卡路径
                        String dbDir = android.os.Environment.getExternalStorageDirectory().getAbsolutePath();
                        dbDir += "CHANG-TAI";// 数据库所在目录
                        String dbPath = dbDir + "/" + name;// 数据库路径
                        // 判断目录是否存在，不存在则创建该目录
                        File dirFile = new File(dbDir);
                        if (!dirFile.exists())
                            dirFile.mkdirs();

                        // 数据库文件是否创建成功
                        boolean isFileCreateSuccess = false;
                        // 判断文件是否存在，不存在则创建该文件
                        File dbFile = new File(dbPath);
                        if (!dbFile.exists()) {
                            try {
                                isFileCreateSuccess = dbFile.createNewFile();// 创建文件
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        } else
                            isFileCreateSuccess = true;
                        // 返回数据库文件对象
                        if (isFileCreateSuccess)
                            return dbFile;
                        else
                            return super.getDatabasePath(name);
                    }
                }

                @Override
                public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory, DatabaseErrorHandler errorHandler) {
                    return SQLiteDatabase.openOrCreateDatabase(getDatabasePath(name), null);
                }

                @Override
                public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory) {
                    return SQLiteDatabase.openOrCreateDatabase(getDatabasePath(name), null);
                }
            }, "CHANG-TAI.db", factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        /*public DevOpenHelper(Context context, String name) {
            super(context, name);
        }*/

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
