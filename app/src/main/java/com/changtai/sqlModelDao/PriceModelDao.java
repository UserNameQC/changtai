package com.changtai.sqlModelDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.changtai.sqlModel.PriceModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRICE_MODEL".
*/
public class PriceModelDao extends AbstractDao<PriceModel, Long> {

    public static final String TABLENAME = "PRICE_MODEL";

    /**
     * Properties of entity PriceModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property SjId = new Property(1, Integer.class, "SjId", false, "SJ_ID");
        public final static Property StationNo = new Property(2, String.class, "StationNo", false, "STATION_NO");
        public final static Property Mc = new Property(3, String.class, "Mc", false, "MC");
        public final static Property Sj1 = new Property(4, String.class, "Sj1", false, "SJ1");
        public final static Property Sj2 = new Property(5, String.class, "Sj2", false, "SJ2");
        public final static Property Sj3 = new Property(6, String.class, "Sj3", false, "SJ3");
        public final static Property AdministratorName = new Property(7, String.class, "AdministratorName", false, "ADMINISTRATOR_NAME");
        public final static Property ServerVersion = new Property(8, Long.class, "ServerVersion", false, "SERVER_VERSION");
        public final static Property ClientVersion = new Property(9, long.class, "ClientVersion", false, "CLIENT_VERSION");
    }


    public PriceModelDao(DaoConfig config) {
        super(config);
    }
    
    public PriceModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRICE_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"SJ_ID\" INTEGER," + // 1: SjId
                "\"STATION_NO\" TEXT," + // 2: StationNo
                "\"MC\" TEXT," + // 3: Mc
                "\"SJ1\" TEXT," + // 4: Sj1
                "\"SJ2\" TEXT," + // 5: Sj2
                "\"SJ3\" TEXT," + // 6: Sj3
                "\"ADMINISTRATOR_NAME\" TEXT," + // 7: AdministratorName
                "\"SERVER_VERSION\" INTEGER," + // 8: ServerVersion
                "\"CLIENT_VERSION\" INTEGER NOT NULL );"); // 9: ClientVersion
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRICE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PriceModel entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Integer SjId = entity.getSjId();
        if (SjId != null) {
            stmt.bindLong(2, SjId);
        }
 
        String StationNo = entity.getStationNo();
        if (StationNo != null) {
            stmt.bindString(3, StationNo);
        }
 
        String Mc = entity.getMc();
        if (Mc != null) {
            stmt.bindString(4, Mc);
        }
 
        String Sj1 = entity.getSj1();
        if (Sj1 != null) {
            stmt.bindString(5, Sj1);
        }
 
        String Sj2 = entity.getSj2();
        if (Sj2 != null) {
            stmt.bindString(6, Sj2);
        }
 
        String Sj3 = entity.getSj3();
        if (Sj3 != null) {
            stmt.bindString(7, Sj3);
        }
 
        String AdministratorName = entity.getAdministratorName();
        if (AdministratorName != null) {
            stmt.bindString(8, AdministratorName);
        }
 
        Long ServerVersion = entity.getServerVersion();
        if (ServerVersion != null) {
            stmt.bindLong(9, ServerVersion);
        }
        stmt.bindLong(10, entity.getClientVersion());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PriceModel entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Integer SjId = entity.getSjId();
        if (SjId != null) {
            stmt.bindLong(2, SjId);
        }
 
        String StationNo = entity.getStationNo();
        if (StationNo != null) {
            stmt.bindString(3, StationNo);
        }
 
        String Mc = entity.getMc();
        if (Mc != null) {
            stmt.bindString(4, Mc);
        }
 
        String Sj1 = entity.getSj1();
        if (Sj1 != null) {
            stmt.bindString(5, Sj1);
        }
 
        String Sj2 = entity.getSj2();
        if (Sj2 != null) {
            stmt.bindString(6, Sj2);
        }
 
        String Sj3 = entity.getSj3();
        if (Sj3 != null) {
            stmt.bindString(7, Sj3);
        }
 
        String AdministratorName = entity.getAdministratorName();
        if (AdministratorName != null) {
            stmt.bindString(8, AdministratorName);
        }
 
        Long ServerVersion = entity.getServerVersion();
        if (ServerVersion != null) {
            stmt.bindLong(9, ServerVersion);
        }
        stmt.bindLong(10, entity.getClientVersion());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PriceModel readEntity(Cursor cursor, int offset) {
        PriceModel entity = new PriceModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // SjId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // StationNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Mc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Sj1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Sj2
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Sj3
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // AdministratorName
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // ServerVersion
            cursor.getLong(offset + 9) // ClientVersion
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PriceModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSjId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setStationNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSj1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSj2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSj3(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAdministratorName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setServerVersion(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setClientVersion(cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PriceModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PriceModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PriceModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
