package com.example.john.greendaodemo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.changtai.db.Price;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRICE".
*/
public class PriceDao extends AbstractDao<Price, Long> {

    public static final String TABLENAME = "PRICE";

    /**
     * Properties of entity Price.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StationNo = new Property(1, long.class, "StationNo", false, "STATION_NO");
        public final static Property SjId = new Property(2, Long.class, "SjId", false, "SJ_ID");
        public final static Property BureauNo = new Property(3, String.class, "BureauNo", false, "BUREAU_NO");
        public final static Property TimeSpan = new Property(4, String.class, "TimeSpan", false, "TIME_SPAN");
        public final static Property Version = new Property(5, String.class, "Version", false, "VERSION");
        public final static Property Mc = new Property(6, String.class, "Mc", false, "MC");
        public final static Property Sj1 = new Property(7, String.class, "Sj1", false, "SJ1");
        public final static Property Sj2 = new Property(8, String.class, "Sj2", false, "SJ2");
        public final static Property Sj3 = new Property(9, String.class, "Sj3", false, "SJ3");
        public final static Property AdministratorName = new Property(10, String.class, "AdministratorName", false, "ADMINISTRATOR_NAME");
    };


    public PriceDao(DaoConfig config) {
        super(config);
    }
    
    public PriceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STATION_NO\" INTEGER NOT NULL ," + // 1: StationNo
                "\"SJ_ID\" INTEGER," + // 2: SjId
                "\"BUREAU_NO\" TEXT," + // 3: BureauNo
                "\"TIME_SPAN\" TEXT," + // 4: TimeSpan
                "\"VERSION\" TEXT," + // 5: Version
                "\"MC\" TEXT," + // 6: Mc
                "\"SJ1\" TEXT," + // 7: Sj1
                "\"SJ2\" TEXT," + // 8: Sj2
                "\"SJ3\" TEXT," + // 9: Sj3
                "\"ADMINISTRATOR_NAME\" TEXT);"); // 10: AdministratorName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Price entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getStationNo());
 
        Long SjId = entity.getSjId();
        if (SjId != null) {
            stmt.bindLong(3, SjId);
        }
 
        String BureauNo = entity.getBureauNo();
        if (BureauNo != null) {
            stmt.bindString(4, BureauNo);
        }
 
        String TimeSpan = entity.getTimeSpan();
        if (TimeSpan != null) {
            stmt.bindString(5, TimeSpan);
        }
 
        String Version = entity.getVersion();
        if (Version != null) {
            stmt.bindString(6, Version);
        }
 
        String Mc = entity.getMc();
        if (Mc != null) {
            stmt.bindString(7, Mc);
        }
 
        String Sj1 = entity.getSj1();
        if (Sj1 != null) {
            stmt.bindString(8, Sj1);
        }
 
        String Sj2 = entity.getSj2();
        if (Sj2 != null) {
            stmt.bindString(9, Sj2);
        }
 
        String Sj3 = entity.getSj3();
        if (Sj3 != null) {
            stmt.bindString(10, Sj3);
        }
 
        String AdministratorName = entity.getAdministratorName();
        if (AdministratorName != null) {
            stmt.bindString(11, AdministratorName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Price entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getStationNo());
 
        Long SjId = entity.getSjId();
        if (SjId != null) {
            stmt.bindLong(3, SjId);
        }
 
        String BureauNo = entity.getBureauNo();
        if (BureauNo != null) {
            stmt.bindString(4, BureauNo);
        }
 
        String TimeSpan = entity.getTimeSpan();
        if (TimeSpan != null) {
            stmt.bindString(5, TimeSpan);
        }
 
        String Version = entity.getVersion();
        if (Version != null) {
            stmt.bindString(6, Version);
        }
 
        String Mc = entity.getMc();
        if (Mc != null) {
            stmt.bindString(7, Mc);
        }
 
        String Sj1 = entity.getSj1();
        if (Sj1 != null) {
            stmt.bindString(8, Sj1);
        }
 
        String Sj2 = entity.getSj2();
        if (Sj2 != null) {
            stmt.bindString(9, Sj2);
        }
 
        String Sj3 = entity.getSj3();
        if (Sj3 != null) {
            stmt.bindString(10, Sj3);
        }
 
        String AdministratorName = entity.getAdministratorName();
        if (AdministratorName != null) {
            stmt.bindString(11, AdministratorName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Price readEntity(Cursor cursor, int offset) {
        Price entity = new Price( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // StationNo
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // SjId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // BureauNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TimeSpan
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Version
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Mc
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Sj1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Sj2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Sj3
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // AdministratorName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Price entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStationNo(cursor.getLong(offset + 1));
        entity.setSjId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setBureauNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimeSpan(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVersion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSj1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSj2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSj3(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAdministratorName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Price entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Price entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
