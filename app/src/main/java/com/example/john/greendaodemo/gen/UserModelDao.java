package com.example.john.greendaodemo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.changtai.sqlModel.UserModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_MODEL".
*/
public class UserModelDao extends AbstractDao<UserModel, Long> {

    public static final String TABLENAME = "USER_MODEL";

    /**
     * Properties of entity UserModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property UserNo = new Property(1, String.class, "userNo", false, "USER_NO");
        public final static Property StationNo = new Property(2, String.class, "stationNo", false, "STATION_NO");
        public final static Property DeviceNo = new Property(3, String.class, "deviceNo", false, "DEVICE_NO");
        public final static Property Index = new Property(4, Integer.class, "index", false, "INDEX");
        public final static Property UserName = new Property(5, String.class, "userName", false, "USER_NAME");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
        public final static Property CreateDatetime = new Property(7, java.util.Date.class, "createDatetime", false, "CREATE_DATETIME");
        public final static Property Linkman = new Property(8, String.class, "linkman", false, "LINKMAN");
        public final static Property SjId = new Property(9, Integer.class, "sjId", false, "SJ_ID");
        public final static Property UsedTotal = new Property(10, String.class, "usedTotal", false, "USED_TOTAL");
        public final static Property PurchaseTotal = new Property(11, String.class, "purchaseTotal", false, "PURCHASE_TOTAL");
        public final static Property PurchaseTotalThisYear = new Property(12, String.class, "purchaseTotalThisYear", false, "PURCHASE_TOTAL_THIS_YEAR");
        public final static Property Overdraft = new Property(13, String.class, "overdraft", false, "OVERDRAFT");
        public final static Property AlarmValue = new Property(14, String.class, "alarmValue", false, "ALARM_VALUE");
        public final static Property CredentialNo = new Property(15, String.class, "credentialNo", false, "CREDENTIAL_NO");
        public final static Property LimitSj1 = new Property(16, String.class, "limitSj1", false, "LIMIT_SJ1");
        public final static Property LimitSj2 = new Property(17, String.class, "limitSj2", false, "LIMIT_SJ2");
        public final static Property Comment = new Property(18, String.class, "comment", false, "COMMENT");
        public final static Property AdministratorName = new Property(19, String.class, "administratorName", false, "ADMINISTRATOR_NAME");
        public final static Property StopFlag = new Property(20, boolean.class, "stopFlag", false, "STOP_FLAG");
        public final static Property CardNo = new Property(21, String.class, "cardNo", false, "CARD_NO");
        public final static Property CreditcardTimes = new Property(22, Integer.class, "creditcardTimes", false, "CREDITCARD_TIMES");
        public final static Property LastDatetime = new Property(23, java.util.Date.class, "lastDatetime", false, "LAST_DATETIME");
        public final static Property DelFlag = new Property(24, boolean.class, "DelFlag", false, "DEL_FLAG");
        public final static Property Key = new Property(25, int.class, "key", false, "KEY");
        public final static Property ServerVersion = new Property(26, long.class, "serverVersion", false, "SERVER_VERSION");
        public final static Property ClientVersion = new Property(27, long.class, "clientVersion", false, "CLIENT_VERSION");
    };


    public UserModelDao(DaoConfig config) {
        super(config);
    }
    
    public UserModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"USER_NO\" TEXT," + // 1: userNo
                "\"STATION_NO\" TEXT," + // 2: stationNo
                "\"DEVICE_NO\" TEXT," + // 3: deviceNo
                "\"INDEX\" INTEGER," + // 4: index
                "\"USER_NAME\" TEXT," + // 5: userName
                "\"PHONE\" TEXT," + // 6: phone
                "\"CREATE_DATETIME\" INTEGER," + // 7: createDatetime
                "\"LINKMAN\" TEXT," + // 8: linkman
                "\"SJ_ID\" INTEGER," + // 9: sjId
                "\"USED_TOTAL\" TEXT," + // 10: usedTotal
                "\"PURCHASE_TOTAL\" TEXT," + // 11: purchaseTotal
                "\"PURCHASE_TOTAL_THIS_YEAR\" TEXT," + // 12: purchaseTotalThisYear
                "\"OVERDRAFT\" TEXT," + // 13: overdraft
                "\"ALARM_VALUE\" TEXT," + // 14: alarmValue
                "\"CREDENTIAL_NO\" TEXT," + // 15: credentialNo
                "\"LIMIT_SJ1\" TEXT," + // 16: limitSj1
                "\"LIMIT_SJ2\" TEXT," + // 17: limitSj2
                "\"COMMENT\" TEXT," + // 18: comment
                "\"ADMINISTRATOR_NAME\" TEXT," + // 19: administratorName
                "\"STOP_FLAG\" INTEGER NOT NULL ," + // 20: stopFlag
                "\"CARD_NO\" TEXT," + // 21: cardNo
                "\"CREDITCARD_TIMES\" INTEGER," + // 22: creditcardTimes
                "\"LAST_DATETIME\" INTEGER," + // 23: lastDatetime
                "\"DEL_FLAG\" INTEGER NOT NULL ," + // 24: DelFlag
                "\"KEY\" INTEGER NOT NULL ," + // 25: key
                "\"SERVER_VERSION\" INTEGER NOT NULL ," + // 26: serverVersion
                "\"CLIENT_VERSION\" INTEGER NOT NULL );"); // 27: clientVersion
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserModel entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String userNo = entity.getUserNo();
        if (userNo != null) {
            stmt.bindString(2, userNo);
        }
 
        String stationNo = entity.getStationNo();
        if (stationNo != null) {
            stmt.bindString(3, stationNo);
        }
 
        String deviceNo = entity.getDeviceNo();
        if (deviceNo != null) {
            stmt.bindString(4, deviceNo);
        }
 
        Integer index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(5, index);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(6, userName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        java.util.Date createDatetime = entity.getCreateDatetime();
        if (createDatetime != null) {
            stmt.bindLong(8, createDatetime.getTime());
        }
 
        String linkman = entity.getLinkman();
        if (linkman != null) {
            stmt.bindString(9, linkman);
        }
 
        Integer sjId = entity.getSjId();
        if (sjId != null) {
            stmt.bindLong(10, sjId);
        }
 
        String usedTotal = entity.getUsedTotal();
        if (usedTotal != null) {
            stmt.bindString(11, usedTotal);
        }
 
        String purchaseTotal = entity.getPurchaseTotal();
        if (purchaseTotal != null) {
            stmt.bindString(12, purchaseTotal);
        }
 
        String purchaseTotalThisYear = entity.getPurchaseTotalThisYear();
        if (purchaseTotalThisYear != null) {
            stmt.bindString(13, purchaseTotalThisYear);
        }
 
        String overdraft = entity.getOverdraft();
        if (overdraft != null) {
            stmt.bindString(14, overdraft);
        }
 
        String alarmValue = entity.getAlarmValue();
        if (alarmValue != null) {
            stmt.bindString(15, alarmValue);
        }
 
        String credentialNo = entity.getCredentialNo();
        if (credentialNo != null) {
            stmt.bindString(16, credentialNo);
        }
 
        String limitSj1 = entity.getLimitSj1();
        if (limitSj1 != null) {
            stmt.bindString(17, limitSj1);
        }
 
        String limitSj2 = entity.getLimitSj2();
        if (limitSj2 != null) {
            stmt.bindString(18, limitSj2);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(19, comment);
        }
 
        String administratorName = entity.getAdministratorName();
        if (administratorName != null) {
            stmt.bindString(20, administratorName);
        }
        stmt.bindLong(21, entity.getStopFlag() ? 1L: 0L);
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(22, cardNo);
        }
 
        Integer creditcardTimes = entity.getCreditcardTimes();
        if (creditcardTimes != null) {
            stmt.bindLong(23, creditcardTimes);
        }
 
        java.util.Date lastDatetime = entity.getLastDatetime();
        if (lastDatetime != null) {
            stmt.bindLong(24, lastDatetime.getTime());
        }
        stmt.bindLong(25, entity.getDelFlag() ? 1L: 0L);
        stmt.bindLong(26, entity.getKey());
        stmt.bindLong(27, entity.getServerVersion());
        stmt.bindLong(28, entity.getClientVersion());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserModel entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String userNo = entity.getUserNo();
        if (userNo != null) {
            stmt.bindString(2, userNo);
        }
 
        String stationNo = entity.getStationNo();
        if (stationNo != null) {
            stmt.bindString(3, stationNo);
        }
 
        String deviceNo = entity.getDeviceNo();
        if (deviceNo != null) {
            stmt.bindString(4, deviceNo);
        }
 
        Integer index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(5, index);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(6, userName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        java.util.Date createDatetime = entity.getCreateDatetime();
        if (createDatetime != null) {
            stmt.bindLong(8, createDatetime.getTime());
        }
 
        String linkman = entity.getLinkman();
        if (linkman != null) {
            stmt.bindString(9, linkman);
        }
 
        Integer sjId = entity.getSjId();
        if (sjId != null) {
            stmt.bindLong(10, sjId);
        }
 
        String usedTotal = entity.getUsedTotal();
        if (usedTotal != null) {
            stmt.bindString(11, usedTotal);
        }
 
        String purchaseTotal = entity.getPurchaseTotal();
        if (purchaseTotal != null) {
            stmt.bindString(12, purchaseTotal);
        }
 
        String purchaseTotalThisYear = entity.getPurchaseTotalThisYear();
        if (purchaseTotalThisYear != null) {
            stmt.bindString(13, purchaseTotalThisYear);
        }
 
        String overdraft = entity.getOverdraft();
        if (overdraft != null) {
            stmt.bindString(14, overdraft);
        }
 
        String alarmValue = entity.getAlarmValue();
        if (alarmValue != null) {
            stmt.bindString(15, alarmValue);
        }
 
        String credentialNo = entity.getCredentialNo();
        if (credentialNo != null) {
            stmt.bindString(16, credentialNo);
        }
 
        String limitSj1 = entity.getLimitSj1();
        if (limitSj1 != null) {
            stmt.bindString(17, limitSj1);
        }
 
        String limitSj2 = entity.getLimitSj2();
        if (limitSj2 != null) {
            stmt.bindString(18, limitSj2);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(19, comment);
        }
 
        String administratorName = entity.getAdministratorName();
        if (administratorName != null) {
            stmt.bindString(20, administratorName);
        }
        stmt.bindLong(21, entity.getStopFlag() ? 1L: 0L);
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(22, cardNo);
        }
 
        Integer creditcardTimes = entity.getCreditcardTimes();
        if (creditcardTimes != null) {
            stmt.bindLong(23, creditcardTimes);
        }
 
        java.util.Date lastDatetime = entity.getLastDatetime();
        if (lastDatetime != null) {
            stmt.bindLong(24, lastDatetime.getTime());
        }
        stmt.bindLong(25, entity.getDelFlag() ? 1L: 0L);
        stmt.bindLong(26, entity.getKey());
        stmt.bindLong(27, entity.getServerVersion());
        stmt.bindLong(28, entity.getClientVersion());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserModel readEntity(Cursor cursor, int offset) {
        UserModel entity = new UserModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stationNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceNo
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // index
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phone
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // createDatetime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // linkman
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // sjId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // usedTotal
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // purchaseTotal
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // purchaseTotalThisYear
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // overdraft
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // alarmValue
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // credentialNo
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // limitSj1
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // limitSj2
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // comment
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // administratorName
            cursor.getShort(offset + 20) != 0, // stopFlag
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // cardNo
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // creditcardTimes
            cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)), // lastDatetime
            cursor.getShort(offset + 24) != 0, // DelFlag
            cursor.getInt(offset + 25), // key
            cursor.getLong(offset + 26), // serverVersion
            cursor.getLong(offset + 27) // clientVersion
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStationNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIndex(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateDatetime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setLinkman(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSjId(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setUsedTotal(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPurchaseTotal(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPurchaseTotalThisYear(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOverdraft(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAlarmValue(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCredentialNo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLimitSj1(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLimitSj2(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setComment(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAdministratorName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setStopFlag(cursor.getShort(offset + 20) != 0);
        entity.setCardNo(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCreditcardTimes(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setLastDatetime(cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)));
        entity.setDelFlag(cursor.getShort(offset + 24) != 0);
        entity.setKey(cursor.getInt(offset + 25));
        entity.setServerVersion(cursor.getLong(offset + 26));
        entity.setClientVersion(cursor.getLong(offset + 27));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
