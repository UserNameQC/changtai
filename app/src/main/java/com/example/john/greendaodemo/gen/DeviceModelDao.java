package com.example.john.greendaodemo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.changtai.sqlModel.DeviceModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_MODEL".
*/
public class DeviceModelDao extends AbstractDao<DeviceModel, Long> {

    public static final String TABLENAME = "DEVICE_MODEL";

    /**
     * Properties of entity DeviceModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DeviceId = new Property(0, Long.class, "DeviceId", true, "_id");
        public final static Property DeviceNo = new Property(1, String.class, "deviceNo", false, "DEVICE_NO");
        public final static Property StationNo = new Property(2, String.class, "stationNo", false, "STATION_NO");
        public final static Property GprsNo = new Property(3, String.class, "gprsNo", false, "GPRS_NO");
        public final static Property DeviceName = new Property(4, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property Index = new Property(5, int.class, "index", false, "INDEX");
        public final static Property Linkman = new Property(6, String.class, "linkman", false, "LINKMAN");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property Location = new Property(8, String.class, "location", false, "LOCATION");
        public final static Property CreateDatetime = new Property(9, java.util.Date.class, "createDatetime", false, "CREATE_DATETIME");
        public final static Property Longitude = new Property(10, String.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(11, String.class, "latitude", false, "LATITUDE");
        public final static Property Comment = new Property(12, String.class, "comment", false, "COMMENT");
        public final static Property AdministratorName = new Property(13, String.class, "administratorName", false, "ADMINISTRATOR_NAME");
        public final static Property StopFlag = new Property(14, boolean.class, "stopFlag", false, "STOP_FLAG");
        public final static Property ServerVersion = new Property(15, long.class, "serverVersion", false, "SERVER_VERSION");
        public final static Property ClientVersion = new Property(16, long.class, "clientVersion", false, "CLIENT_VERSION");
        public final static Property DelFlag = new Property(17, boolean.class, "DelFlag", false, "DEL_FLAG");
        public final static Property Key = new Property(18, int.class, "key", false, "KEY");
    }


    public DeviceModelDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: DeviceId
                "\"DEVICE_NO\" TEXT," + // 1: deviceNo
                "\"STATION_NO\" TEXT," + // 2: stationNo
                "\"GPRS_NO\" TEXT," + // 3: gprsNo
                "\"DEVICE_NAME\" TEXT," + // 4: deviceName
                "\"INDEX\" INTEGER NOT NULL ," + // 5: index
                "\"LINKMAN\" TEXT," + // 6: linkman
                "\"PHONE\" TEXT," + // 7: phone
                "\"LOCATION\" TEXT," + // 8: location
                "\"CREATE_DATETIME\" INTEGER," + // 9: createDatetime
                "\"LONGITUDE\" TEXT," + // 10: longitude
                "\"LATITUDE\" TEXT," + // 11: latitude
                "\"COMMENT\" TEXT," + // 12: comment
                "\"ADMINISTRATOR_NAME\" TEXT," + // 13: administratorName
                "\"STOP_FLAG\" INTEGER NOT NULL ," + // 14: stopFlag
                "\"SERVER_VERSION\" INTEGER NOT NULL ," + // 15: serverVersion
                "\"CLIENT_VERSION\" INTEGER NOT NULL ," + // 16: clientVersion
                "\"DEL_FLAG\" INTEGER NOT NULL ," + // 17: DelFlag
                "\"KEY\" INTEGER NOT NULL );"); // 18: key
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceModel entity) {
        stmt.clearBindings();
 
        Long DeviceId = entity.getDeviceId();
        if (DeviceId != null) {
            stmt.bindLong(1, DeviceId);
        }
 
        String deviceNo = entity.getDeviceNo();
        if (deviceNo != null) {
            stmt.bindString(2, deviceNo);
        }
 
        String stationNo = entity.getStationNo();
        if (stationNo != null) {
            stmt.bindString(3, stationNo);
        }
 
        String gprsNo = entity.getGprsNo();
        if (gprsNo != null) {
            stmt.bindString(4, gprsNo);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(5, deviceName);
        }
        stmt.bindLong(6, entity.getIndex());
 
        String linkman = entity.getLinkman();
        if (linkman != null) {
            stmt.bindString(7, linkman);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(9, location);
        }
 
        java.util.Date createDatetime = entity.getCreateDatetime();
        if (createDatetime != null) {
            stmt.bindLong(10, createDatetime.getTime());
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(11, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(12, latitude);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(13, comment);
        }
 
        String administratorName = entity.getAdministratorName();
        if (administratorName != null) {
            stmt.bindString(14, administratorName);
        }
        stmt.bindLong(15, entity.getStopFlag() ? 1L: 0L);
        stmt.bindLong(16, entity.getServerVersion());
        stmt.bindLong(17, entity.getClientVersion());
        stmt.bindLong(18, entity.getDelFlag() ? 1L: 0L);
        stmt.bindLong(19, entity.getKey());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceModel entity) {
        stmt.clearBindings();
 
        Long DeviceId = entity.getDeviceId();
        if (DeviceId != null) {
            stmt.bindLong(1, DeviceId);
        }
 
        String deviceNo = entity.getDeviceNo();
        if (deviceNo != null) {
            stmt.bindString(2, deviceNo);
        }
 
        String stationNo = entity.getStationNo();
        if (stationNo != null) {
            stmt.bindString(3, stationNo);
        }
 
        String gprsNo = entity.getGprsNo();
        if (gprsNo != null) {
            stmt.bindString(4, gprsNo);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(5, deviceName);
        }
        stmt.bindLong(6, entity.getIndex());
 
        String linkman = entity.getLinkman();
        if (linkman != null) {
            stmt.bindString(7, linkman);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(9, location);
        }
 
        java.util.Date createDatetime = entity.getCreateDatetime();
        if (createDatetime != null) {
            stmt.bindLong(10, createDatetime.getTime());
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(11, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(12, latitude);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(13, comment);
        }
 
        String administratorName = entity.getAdministratorName();
        if (administratorName != null) {
            stmt.bindString(14, administratorName);
        }
        stmt.bindLong(15, entity.getStopFlag() ? 1L: 0L);
        stmt.bindLong(16, entity.getServerVersion());
        stmt.bindLong(17, entity.getClientVersion());
        stmt.bindLong(18, entity.getDelFlag() ? 1L: 0L);
        stmt.bindLong(19, entity.getKey());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceModel readEntity(Cursor cursor, int offset) {
        DeviceModel entity = new DeviceModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // DeviceId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stationNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gprsNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceName
            cursor.getInt(offset + 5), // index
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // linkman
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // location
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // createDatetime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // longitude
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // latitude
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // comment
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // administratorName
            cursor.getShort(offset + 14) != 0, // stopFlag
            cursor.getLong(offset + 15), // serverVersion
            cursor.getLong(offset + 16), // clientVersion
            cursor.getShort(offset + 17) != 0, // DelFlag
            cursor.getInt(offset + 18) // key
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceModel entity, int offset) {
        entity.setDeviceId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStationNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGprsNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeviceName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIndex(cursor.getInt(offset + 5));
        entity.setLinkman(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLocation(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateDatetime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setLongitude(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLatitude(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setComment(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAdministratorName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStopFlag(cursor.getShort(offset + 14) != 0);
        entity.setServerVersion(cursor.getLong(offset + 15));
        entity.setClientVersion(cursor.getLong(offset + 16));
        entity.setDelFlag(cursor.getShort(offset + 17) != 0);
        entity.setKey(cursor.getInt(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceModel entity, long rowId) {
        entity.setDeviceId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceModel entity) {
        if(entity != null) {
            return entity.getDeviceId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceModel entity) {
        return entity.getDeviceId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
