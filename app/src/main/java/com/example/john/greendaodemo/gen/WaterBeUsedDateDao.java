package com.example.john.greendaodemo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.changtai.db.WaterBeUsedDate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WATER_BE_USED_DATE".
*/
public class WaterBeUsedDateDao extends AbstractDao<WaterBeUsedDate, Long> {

    public static final String TABLENAME = "WATER_BE_USED_DATE";

    /**
     * Properties of entity WaterBeUsedDate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property BureauNo = new Property(1, String.class, "BureauNo", false, "BUREAU_NO");
        public final static Property StationNo = new Property(2, String.class, "StationNo", false, "STATION_NO");
        public final static Property DeviceNo = new Property(3, String.class, "DeviceNo", false, "DEVICE_NO");
        public final static Property UserNo = new Property(4, String.class, "UserNo", false, "USER_NO");
        public final static Property Flow = new Property(5, String.class, "Flow", false, "FLOW");
        public final static Property UsedTotal = new Property(6, String.class, "UsedTotal", false, "USED_TOTAL");
        public final static Property PurchaseTotal = new Property(7, String.class, "PurchaseTotal", false, "PURCHASE_TOTAL");
        public final static Property Overdraft = new Property(8, String.class, "Overdraft", false, "OVERDRAFT");
        public final static Property AlarmValue = new Property(9, String.class, "AlarmValue", false, "ALARM_VALUE");
        public final static Property PurchaseDate = new Property(10, String.class, "PurchaseDate", false, "PURCHASE_DATE");
        public final static Property CreateDateTime = new Property(11, String.class, "CreateDateTime", false, "CREATE_DATE_TIME");
    };


    public WaterBeUsedDateDao(DaoConfig config) {
        super(config);
    }
    
    public WaterBeUsedDateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WATER_BE_USED_DATE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"BUREAU_NO\" TEXT," + // 1: BureauNo
                "\"STATION_NO\" TEXT," + // 2: StationNo
                "\"DEVICE_NO\" TEXT," + // 3: DeviceNo
                "\"USER_NO\" TEXT," + // 4: UserNo
                "\"FLOW\" TEXT," + // 5: Flow
                "\"USED_TOTAL\" TEXT," + // 6: UsedTotal
                "\"PURCHASE_TOTAL\" TEXT," + // 7: PurchaseTotal
                "\"OVERDRAFT\" TEXT," + // 8: Overdraft
                "\"ALARM_VALUE\" TEXT," + // 9: AlarmValue
                "\"PURCHASE_DATE\" TEXT," + // 10: PurchaseDate
                "\"CREATE_DATE_TIME\" TEXT);"); // 11: CreateDateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WATER_BE_USED_DATE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WaterBeUsedDate entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String BureauNo = entity.getBureauNo();
        if (BureauNo != null) {
            stmt.bindString(2, BureauNo);
        }
 
        String StationNo = entity.getStationNo();
        if (StationNo != null) {
            stmt.bindString(3, StationNo);
        }
 
        String DeviceNo = entity.getDeviceNo();
        if (DeviceNo != null) {
            stmt.bindString(4, DeviceNo);
        }
 
        String UserNo = entity.getUserNo();
        if (UserNo != null) {
            stmt.bindString(5, UserNo);
        }
 
        String Flow = entity.getFlow();
        if (Flow != null) {
            stmt.bindString(6, Flow);
        }
 
        String UsedTotal = entity.getUsedTotal();
        if (UsedTotal != null) {
            stmt.bindString(7, UsedTotal);
        }
 
        String PurchaseTotal = entity.getPurchaseTotal();
        if (PurchaseTotal != null) {
            stmt.bindString(8, PurchaseTotal);
        }
 
        String Overdraft = entity.getOverdraft();
        if (Overdraft != null) {
            stmt.bindString(9, Overdraft);
        }
 
        String AlarmValue = entity.getAlarmValue();
        if (AlarmValue != null) {
            stmt.bindString(10, AlarmValue);
        }
 
        String PurchaseDate = entity.getPurchaseDate();
        if (PurchaseDate != null) {
            stmt.bindString(11, PurchaseDate);
        }
 
        String CreateDateTime = entity.getCreateDateTime();
        if (CreateDateTime != null) {
            stmt.bindString(12, CreateDateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WaterBeUsedDate entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String BureauNo = entity.getBureauNo();
        if (BureauNo != null) {
            stmt.bindString(2, BureauNo);
        }
 
        String StationNo = entity.getStationNo();
        if (StationNo != null) {
            stmt.bindString(3, StationNo);
        }
 
        String DeviceNo = entity.getDeviceNo();
        if (DeviceNo != null) {
            stmt.bindString(4, DeviceNo);
        }
 
        String UserNo = entity.getUserNo();
        if (UserNo != null) {
            stmt.bindString(5, UserNo);
        }
 
        String Flow = entity.getFlow();
        if (Flow != null) {
            stmt.bindString(6, Flow);
        }
 
        String UsedTotal = entity.getUsedTotal();
        if (UsedTotal != null) {
            stmt.bindString(7, UsedTotal);
        }
 
        String PurchaseTotal = entity.getPurchaseTotal();
        if (PurchaseTotal != null) {
            stmt.bindString(8, PurchaseTotal);
        }
 
        String Overdraft = entity.getOverdraft();
        if (Overdraft != null) {
            stmt.bindString(9, Overdraft);
        }
 
        String AlarmValue = entity.getAlarmValue();
        if (AlarmValue != null) {
            stmt.bindString(10, AlarmValue);
        }
 
        String PurchaseDate = entity.getPurchaseDate();
        if (PurchaseDate != null) {
            stmt.bindString(11, PurchaseDate);
        }
 
        String CreateDateTime = entity.getCreateDateTime();
        if (CreateDateTime != null) {
            stmt.bindString(12, CreateDateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WaterBeUsedDate readEntity(Cursor cursor, int offset) {
        WaterBeUsedDate entity = new WaterBeUsedDate( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // BureauNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // StationNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DeviceNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // UserNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Flow
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // UsedTotal
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // PurchaseTotal
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Overdraft
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // AlarmValue
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // PurchaseDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // CreateDateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WaterBeUsedDate entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBureauNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStationNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFlow(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUsedTotal(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPurchaseTotal(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOverdraft(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAlarmValue(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPurchaseDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreateDateTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WaterBeUsedDate entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WaterBeUsedDate entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
