package com.example.john.greendaodemo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.changtai.db.PurchaseRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PURCHASE_RECORD".
*/
public class PurchaseRecordDao extends AbstractDao<PurchaseRecord, Long> {

    public static final String TABLENAME = "PURCHASE_RECORD";

    /**
     * Properties of entity PurchaseRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PurchaseRecordId = new Property(1, Long.class, "PurchaseRecordId", false, "PURCHASE_RECORD_ID");
        public final static Property BureauNo = new Property(2, String.class, "BureauNo", false, "BUREAU_NO");
        public final static Property DeviceNo = new Property(3, String.class, "DeviceNo", false, "DEVICE_NO");
        public final static Property StationNo = new Property(4, String.class, "StationNo", false, "STATION_NO");
        public final static Property UserName = new Property(5, String.class, "UserName", false, "USER_NAME");
        public final static Property UserNo = new Property(6, String.class, "UserNo", false, "USER_NO");
        public final static Property PurchaseTotalThisTime = new Property(7, String.class, "PurchaseTotalThisTime", false, "PURCHASE_TOTAL_THIS_TIME");
        public final static Property PurchaseAmountThisTime = new Property(8, String.class, "PurchaseAmountThisTime", false, "PURCHASE_AMOUNT_THIS_TIME");
        public final static Property PurchaseDateTimeThisTime = new Property(9, String.class, "PurchaseDateTimeThisTime", false, "PURCHASE_DATE_TIME_THIS_TIME");
        public final static Property PurchaseYear = new Property(10, String.class, "PurchaseYear", false, "PURCHASE_YEAR");
        public final static Property PurchaseTotalThisYear = new Property(11, String.class, "PurchaseTotalThisYear", false, "PURCHASE_TOTAL_THIS_YEAR");
        public final static Property PurchaseTotal = new Property(12, String.class, "PurchaseTotal", false, "PURCHASE_TOTAL");
        public final static Property PriceSj1 = new Property(13, String.class, "PriceSj1", false, "PRICE_SJ1");
        public final static Property TotalSj1 = new Property(14, String.class, "TotalSj1", false, "TOTAL_SJ1");
        public final static Property AmountSj1 = new Property(15, String.class, "AmountSj1", false, "AMOUNT_SJ1");
        public final static Property PriceSj2 = new Property(16, String.class, "PriceSj2", false, "PRICE_SJ2");
        public final static Property TotalSj2 = new Property(17, String.class, "TotalSj2", false, "TOTAL_SJ2");
        public final static Property AmountSj2 = new Property(18, String.class, "AmountSj2", false, "AMOUNT_SJ2");
        public final static Property PriceSj3 = new Property(19, String.class, "PriceSj3", false, "PRICE_SJ3");
        public final static Property TotalSj3 = new Property(20, String.class, "TotalSj3", false, "TOTAL_SJ3");
        public final static Property AmountSj3 = new Property(21, String.class, "AmountSj3", false, "AMOUNT_SJ3");
        public final static Property AdministratorName = new Property(22, String.class, "AdministratorName", false, "ADMINISTRATOR_NAME");
        public final static Property TimeSpan = new Property(23, String.class, "TimeSpan", false, "TIME_SPAN");
        public final static Property Version = new Property(24, String.class, "Version", false, "VERSION");
    };


    public PurchaseRecordDao(DaoConfig config) {
        super(config);
    }
    
    public PurchaseRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PURCHASE_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PURCHASE_RECORD_ID\" INTEGER," + // 1: PurchaseRecordId
                "\"BUREAU_NO\" TEXT," + // 2: BureauNo
                "\"DEVICE_NO\" TEXT," + // 3: DeviceNo
                "\"STATION_NO\" TEXT," + // 4: StationNo
                "\"USER_NAME\" TEXT," + // 5: UserName
                "\"USER_NO\" TEXT," + // 6: UserNo
                "\"PURCHASE_TOTAL_THIS_TIME\" TEXT," + // 7: PurchaseTotalThisTime
                "\"PURCHASE_AMOUNT_THIS_TIME\" TEXT," + // 8: PurchaseAmountThisTime
                "\"PURCHASE_DATE_TIME_THIS_TIME\" TEXT," + // 9: PurchaseDateTimeThisTime
                "\"PURCHASE_YEAR\" TEXT," + // 10: PurchaseYear
                "\"PURCHASE_TOTAL_THIS_YEAR\" TEXT," + // 11: PurchaseTotalThisYear
                "\"PURCHASE_TOTAL\" TEXT," + // 12: PurchaseTotal
                "\"PRICE_SJ1\" TEXT," + // 13: PriceSj1
                "\"TOTAL_SJ1\" TEXT," + // 14: TotalSj1
                "\"AMOUNT_SJ1\" TEXT," + // 15: AmountSj1
                "\"PRICE_SJ2\" TEXT," + // 16: PriceSj2
                "\"TOTAL_SJ2\" TEXT," + // 17: TotalSj2
                "\"AMOUNT_SJ2\" TEXT," + // 18: AmountSj2
                "\"PRICE_SJ3\" TEXT," + // 19: PriceSj3
                "\"TOTAL_SJ3\" TEXT," + // 20: TotalSj3
                "\"AMOUNT_SJ3\" TEXT," + // 21: AmountSj3
                "\"ADMINISTRATOR_NAME\" TEXT," + // 22: AdministratorName
                "\"TIME_SPAN\" TEXT," + // 23: TimeSpan
                "\"VERSION\" TEXT);"); // 24: Version
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PURCHASE_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PurchaseRecord entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Long PurchaseRecordId = entity.getPurchaseRecordId();
        if (PurchaseRecordId != null) {
            stmt.bindLong(2, PurchaseRecordId);
        }
 
        String BureauNo = entity.getBureauNo();
        if (BureauNo != null) {
            stmt.bindString(3, BureauNo);
        }
 
        String DeviceNo = entity.getDeviceNo();
        if (DeviceNo != null) {
            stmt.bindString(4, DeviceNo);
        }
 
        String StationNo = entity.getStationNo();
        if (StationNo != null) {
            stmt.bindString(5, StationNo);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(6, UserName);
        }
 
        String UserNo = entity.getUserNo();
        if (UserNo != null) {
            stmt.bindString(7, UserNo);
        }
 
        String PurchaseTotalThisTime = entity.getPurchaseTotalThisTime();
        if (PurchaseTotalThisTime != null) {
            stmt.bindString(8, PurchaseTotalThisTime);
        }
 
        String PurchaseAmountThisTime = entity.getPurchaseAmountThisTime();
        if (PurchaseAmountThisTime != null) {
            stmt.bindString(9, PurchaseAmountThisTime);
        }
 
        String PurchaseDateTimeThisTime = entity.getPurchaseDateTimeThisTime();
        if (PurchaseDateTimeThisTime != null) {
            stmt.bindString(10, PurchaseDateTimeThisTime);
        }
 
        String PurchaseYear = entity.getPurchaseYear();
        if (PurchaseYear != null) {
            stmt.bindString(11, PurchaseYear);
        }
 
        String PurchaseTotalThisYear = entity.getPurchaseTotalThisYear();
        if (PurchaseTotalThisYear != null) {
            stmt.bindString(12, PurchaseTotalThisYear);
        }
 
        String PurchaseTotal = entity.getPurchaseTotal();
        if (PurchaseTotal != null) {
            stmt.bindString(13, PurchaseTotal);
        }
 
        String PriceSj1 = entity.getPriceSj1();
        if (PriceSj1 != null) {
            stmt.bindString(14, PriceSj1);
        }
 
        String TotalSj1 = entity.getTotalSj1();
        if (TotalSj1 != null) {
            stmt.bindString(15, TotalSj1);
        }
 
        String AmountSj1 = entity.getAmountSj1();
        if (AmountSj1 != null) {
            stmt.bindString(16, AmountSj1);
        }
 
        String PriceSj2 = entity.getPriceSj2();
        if (PriceSj2 != null) {
            stmt.bindString(17, PriceSj2);
        }
 
        String TotalSj2 = entity.getTotalSj2();
        if (TotalSj2 != null) {
            stmt.bindString(18, TotalSj2);
        }
 
        String AmountSj2 = entity.getAmountSj2();
        if (AmountSj2 != null) {
            stmt.bindString(19, AmountSj2);
        }
 
        String PriceSj3 = entity.getPriceSj3();
        if (PriceSj3 != null) {
            stmt.bindString(20, PriceSj3);
        }
 
        String TotalSj3 = entity.getTotalSj3();
        if (TotalSj3 != null) {
            stmt.bindString(21, TotalSj3);
        }
 
        String AmountSj3 = entity.getAmountSj3();
        if (AmountSj3 != null) {
            stmt.bindString(22, AmountSj3);
        }
 
        String AdministratorName = entity.getAdministratorName();
        if (AdministratorName != null) {
            stmt.bindString(23, AdministratorName);
        }
 
        String TimeSpan = entity.getTimeSpan();
        if (TimeSpan != null) {
            stmt.bindString(24, TimeSpan);
        }
 
        String Version = entity.getVersion();
        if (Version != null) {
            stmt.bindString(25, Version);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PurchaseRecord entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Long PurchaseRecordId = entity.getPurchaseRecordId();
        if (PurchaseRecordId != null) {
            stmt.bindLong(2, PurchaseRecordId);
        }
 
        String BureauNo = entity.getBureauNo();
        if (BureauNo != null) {
            stmt.bindString(3, BureauNo);
        }
 
        String DeviceNo = entity.getDeviceNo();
        if (DeviceNo != null) {
            stmt.bindString(4, DeviceNo);
        }
 
        String StationNo = entity.getStationNo();
        if (StationNo != null) {
            stmt.bindString(5, StationNo);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(6, UserName);
        }
 
        String UserNo = entity.getUserNo();
        if (UserNo != null) {
            stmt.bindString(7, UserNo);
        }
 
        String PurchaseTotalThisTime = entity.getPurchaseTotalThisTime();
        if (PurchaseTotalThisTime != null) {
            stmt.bindString(8, PurchaseTotalThisTime);
        }
 
        String PurchaseAmountThisTime = entity.getPurchaseAmountThisTime();
        if (PurchaseAmountThisTime != null) {
            stmt.bindString(9, PurchaseAmountThisTime);
        }
 
        String PurchaseDateTimeThisTime = entity.getPurchaseDateTimeThisTime();
        if (PurchaseDateTimeThisTime != null) {
            stmt.bindString(10, PurchaseDateTimeThisTime);
        }
 
        String PurchaseYear = entity.getPurchaseYear();
        if (PurchaseYear != null) {
            stmt.bindString(11, PurchaseYear);
        }
 
        String PurchaseTotalThisYear = entity.getPurchaseTotalThisYear();
        if (PurchaseTotalThisYear != null) {
            stmt.bindString(12, PurchaseTotalThisYear);
        }
 
        String PurchaseTotal = entity.getPurchaseTotal();
        if (PurchaseTotal != null) {
            stmt.bindString(13, PurchaseTotal);
        }
 
        String PriceSj1 = entity.getPriceSj1();
        if (PriceSj1 != null) {
            stmt.bindString(14, PriceSj1);
        }
 
        String TotalSj1 = entity.getTotalSj1();
        if (TotalSj1 != null) {
            stmt.bindString(15, TotalSj1);
        }
 
        String AmountSj1 = entity.getAmountSj1();
        if (AmountSj1 != null) {
            stmt.bindString(16, AmountSj1);
        }
 
        String PriceSj2 = entity.getPriceSj2();
        if (PriceSj2 != null) {
            stmt.bindString(17, PriceSj2);
        }
 
        String TotalSj2 = entity.getTotalSj2();
        if (TotalSj2 != null) {
            stmt.bindString(18, TotalSj2);
        }
 
        String AmountSj2 = entity.getAmountSj2();
        if (AmountSj2 != null) {
            stmt.bindString(19, AmountSj2);
        }
 
        String PriceSj3 = entity.getPriceSj3();
        if (PriceSj3 != null) {
            stmt.bindString(20, PriceSj3);
        }
 
        String TotalSj3 = entity.getTotalSj3();
        if (TotalSj3 != null) {
            stmt.bindString(21, TotalSj3);
        }
 
        String AmountSj3 = entity.getAmountSj3();
        if (AmountSj3 != null) {
            stmt.bindString(22, AmountSj3);
        }
 
        String AdministratorName = entity.getAdministratorName();
        if (AdministratorName != null) {
            stmt.bindString(23, AdministratorName);
        }
 
        String TimeSpan = entity.getTimeSpan();
        if (TimeSpan != null) {
            stmt.bindString(24, TimeSpan);
        }
 
        String Version = entity.getVersion();
        if (Version != null) {
            stmt.bindString(25, Version);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PurchaseRecord readEntity(Cursor cursor, int offset) {
        PurchaseRecord entity = new PurchaseRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // PurchaseRecordId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // BureauNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DeviceNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // StationNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // UserName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // UserNo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // PurchaseTotalThisTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // PurchaseAmountThisTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // PurchaseDateTimeThisTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // PurchaseYear
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // PurchaseTotalThisYear
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // PurchaseTotal
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // PriceSj1
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // TotalSj1
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // AmountSj1
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // PriceSj2
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // TotalSj2
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // AmountSj2
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // PriceSj3
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // TotalSj3
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // AmountSj3
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // AdministratorName
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // TimeSpan
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // Version
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PurchaseRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPurchaseRecordId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBureauNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStationNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPurchaseTotalThisTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPurchaseAmountThisTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPurchaseDateTimeThisTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPurchaseYear(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPurchaseTotalThisYear(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPurchaseTotal(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPriceSj1(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTotalSj1(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAmountSj1(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPriceSj2(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTotalSj2(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAmountSj2(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPriceSj3(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTotalSj3(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAmountSj3(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setAdministratorName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setTimeSpan(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setVersion(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PurchaseRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PurchaseRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
