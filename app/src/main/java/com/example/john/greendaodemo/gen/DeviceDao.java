package com.example.john.greendaodemo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.changtai.db.Device;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE".
*/
public class DeviceDao extends AbstractDao<Device, Long> {

    public static final String TABLENAME = "DEVICE";

    /**
     * Properties of entity Device.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BureauNo = new Property(1, Long.class, "BureauNo", false, "BUREAU_NO");
        public final static Property StationNo = new Property(2, Long.class, "StationNo", false, "STATION_NO");
        public final static Property DeviceNo = new Property(3, Long.class, "DeviceNo", false, "DEVICE_NO");
        public final static Property GprsNo = new Property(4, String.class, "GprsNo", false, "GPRS_NO");
        public final static Property DeviceName = new Property(5, String.class, "DeviceName", false, "DEVICE_NAME");
        public final static Property Index = new Property(6, int.class, "Index", false, "INDEX");
        public final static Property Linkman = new Property(7, String.class, "Linkman", false, "LINKMAN");
        public final static Property Phone = new Property(8, String.class, "Phone", false, "PHONE");
        public final static Property Location = new Property(9, String.class, "Location", false, "LOCATION");
        public final static Property CreateDateTime = new Property(10, String.class, "CreateDateTime", false, "CREATE_DATE_TIME");
        public final static Property Longitude = new Property(11, String.class, "Longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(12, String.class, "Latitude", false, "LATITUDE");
        public final static Property Comment = new Property(13, String.class, "comment", false, "COMMENT");
        public final static Property AdministratorName = new Property(14, String.class, "AdministratorName", false, "ADMINISTRATOR_NAME");
        public final static Property TimeSpan = new Property(15, String.class, "TimeSpan", false, "TIME_SPAN");
        public final static Property StopFlag = new Property(16, String.class, "StopFlag", false, "STOP_FLAG");
        public final static Property Version = new Property(17, long.class, "Version", false, "VERSION");
    };


    public DeviceDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BUREAU_NO\" INTEGER," + // 1: BureauNo
                "\"STATION_NO\" INTEGER," + // 2: StationNo
                "\"DEVICE_NO\" INTEGER," + // 3: DeviceNo
                "\"GPRS_NO\" TEXT," + // 4: GprsNo
                "\"DEVICE_NAME\" TEXT," + // 5: DeviceName
                "\"INDEX\" INTEGER NOT NULL ," + // 6: Index
                "\"LINKMAN\" TEXT," + // 7: Linkman
                "\"PHONE\" TEXT," + // 8: Phone
                "\"LOCATION\" TEXT," + // 9: Location
                "\"CREATE_DATE_TIME\" TEXT," + // 10: CreateDateTime
                "\"LONGITUDE\" TEXT," + // 11: Longitude
                "\"LATITUDE\" TEXT," + // 12: Latitude
                "\"COMMENT\" TEXT," + // 13: comment
                "\"ADMINISTRATOR_NAME\" TEXT," + // 14: AdministratorName
                "\"TIME_SPAN\" TEXT," + // 15: TimeSpan
                "\"STOP_FLAG\" TEXT," + // 16: StopFlag
                "\"VERSION\" INTEGER NOT NULL );"); // 17: Version
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Long BureauNo = entity.getBureauNo();
        if (BureauNo != null) {
            stmt.bindLong(2, BureauNo);
        }
 
        Long StationNo = entity.getStationNo();
        if (StationNo != null) {
            stmt.bindLong(3, StationNo);
        }
 
        Long DeviceNo = entity.getDeviceNo();
        if (DeviceNo != null) {
            stmt.bindLong(4, DeviceNo);
        }
 
        String GprsNo = entity.getGprsNo();
        if (GprsNo != null) {
            stmt.bindString(5, GprsNo);
        }
 
        String DeviceName = entity.getDeviceName();
        if (DeviceName != null) {
            stmt.bindString(6, DeviceName);
        }
        stmt.bindLong(7, entity.getIndex());
 
        String Linkman = entity.getLinkman();
        if (Linkman != null) {
            stmt.bindString(8, Linkman);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(9, Phone);
        }
 
        String Location = entity.getLocation();
        if (Location != null) {
            stmt.bindString(10, Location);
        }
 
        String CreateDateTime = entity.getCreateDateTime();
        if (CreateDateTime != null) {
            stmt.bindString(11, CreateDateTime);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(12, Longitude);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(13, Latitude);
        }
 
        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(14, Comment);
        }
 
        String AdministratorName = entity.getAdministratorName();
        if (AdministratorName != null) {
            stmt.bindString(15, AdministratorName);
        }
 
        String TimeSpan = entity.getTimeSpan();
        if (TimeSpan != null) {
            stmt.bindString(16, TimeSpan);
        }
 
        String StopFlag = entity.getStopFlag();
        if (StopFlag != null) {
            stmt.bindString(17, StopFlag);
        }
        stmt.bindLong(18, entity.getVersion());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Long BureauNo = entity.getBureauNo();
        if (BureauNo != null) {
            stmt.bindLong(2, BureauNo);
        }
 
        Long StationNo = entity.getStationNo();
        if (StationNo != null) {
            stmt.bindLong(3, StationNo);
        }
 
        Long DeviceNo = entity.getDeviceNo();
        if (DeviceNo != null) {
            stmt.bindLong(4, DeviceNo);
        }
 
        String GprsNo = entity.getGprsNo();
        if (GprsNo != null) {
            stmt.bindString(5, GprsNo);
        }
 
        String DeviceName = entity.getDeviceName();
        if (DeviceName != null) {
            stmt.bindString(6, DeviceName);
        }
        stmt.bindLong(7, entity.getIndex());
 
        String Linkman = entity.getLinkman();
        if (Linkman != null) {
            stmt.bindString(8, Linkman);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(9, Phone);
        }
 
        String Location = entity.getLocation();
        if (Location != null) {
            stmt.bindString(10, Location);
        }
 
        String CreateDateTime = entity.getCreateDateTime();
        if (CreateDateTime != null) {
            stmt.bindString(11, CreateDateTime);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(12, Longitude);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(13, Latitude);
        }
 
        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(14, Comment);
        }
 
        String AdministratorName = entity.getAdministratorName();
        if (AdministratorName != null) {
            stmt.bindString(15, AdministratorName);
        }
 
        String TimeSpan = entity.getTimeSpan();
        if (TimeSpan != null) {
            stmt.bindString(16, TimeSpan);
        }
 
        String StopFlag = entity.getStopFlag();
        if (StopFlag != null) {
            stmt.bindString(17, StopFlag);
        }
        stmt.bindLong(18, entity.getVersion());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Device readEntity(Cursor cursor, int offset) {
        Device entity = new Device( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // BureauNo
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // StationNo
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // DeviceNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // GprsNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DeviceName
            cursor.getInt(offset + 6), // Index
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Linkman
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Phone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Location
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // CreateDateTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Longitude
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Latitude
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // comment
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // AdministratorName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // TimeSpan
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // StopFlag
            cursor.getLong(offset + 17) // Version
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Device entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBureauNo(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStationNo(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDeviceNo(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setGprsNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeviceName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIndex(cursor.getInt(offset + 6));
        entity.setLinkman(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLocation(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreateDateTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLongitude(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLatitude(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setComment(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAdministratorName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTimeSpan(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setStopFlag(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setVersion(cursor.getLong(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Device entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Device entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
