package com.example.john.greendaodemo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.changtai.sqlModel.PurchaseRecordModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PURCHASE_RECORD_MODEL".
*/
public class PurchaseRecordModelDao extends AbstractDao<PurchaseRecordModel, Long> {

    public static final String TABLENAME = "PURCHASE_RECORD_MODEL";

    /**
     * Properties of entity PurchaseRecordModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property PurchaseRecordId = new Property(1, String.class, "purchaseRecordId", false, "PURCHASE_RECORD_ID");
        public final static Property DeviceNo = new Property(2, String.class, "deviceNo", false, "DEVICE_NO");
        public final static Property StationNo = new Property(3, String.class, "stationNo", false, "STATION_NO");
        public final static Property UserName = new Property(4, String.class, "userName", false, "USER_NAME");
        public final static Property UserNo = new Property(5, String.class, "userNo", false, "USER_NO");
        public final static Property PurchaseTotalThisTime = new Property(6, String.class, "purchaseTotalThisTime", false, "PURCHASE_TOTAL_THIS_TIME");
        public final static Property PurchaseaMountThisTime = new Property(7, String.class, "purchaseaMountThisTime", false, "PURCHASEA_MOUNT_THIS_TIME");
        public final static Property PurchaseDatetimeThisTime = new Property(8, java.util.Date.class, "purchaseDatetimeThisTime", false, "PURCHASE_DATETIME_THIS_TIME");
        public final static Property PurchaseYear = new Property(9, Integer.class, "purchaseYear", false, "PURCHASE_YEAR");
        public final static Property PurchaseTotalThisYear = new Property(10, String.class, "purchaseTotalThisYear", false, "PURCHASE_TOTAL_THIS_YEAR");
        public final static Property PurchaseTotal = new Property(11, String.class, "purchaseTotal", false, "PURCHASE_TOTAL");
        public final static Property PriceSj1 = new Property(12, String.class, "priceSj1", false, "PRICE_SJ1");
        public final static Property TotalSj1 = new Property(13, String.class, "totalSj1", false, "TOTAL_SJ1");
        public final static Property AmountSj1 = new Property(14, String.class, "amountSj1", false, "AMOUNT_SJ1");
        public final static Property PriceSj2 = new Property(15, String.class, "priceSj2", false, "PRICE_SJ2");
        public final static Property TotalSj2 = new Property(16, String.class, "totalSj2", false, "TOTAL_SJ2");
        public final static Property AmountSj2 = new Property(17, String.class, "amountSj2", false, "AMOUNT_SJ2");
        public final static Property PriceSj3 = new Property(18, String.class, "priceSj3", false, "PRICE_SJ3");
        public final static Property TotalSj3 = new Property(19, String.class, "totalSj3", false, "TOTAL_SJ3");
        public final static Property AmountSj3 = new Property(20, String.class, "amountSj3", false, "AMOUNT_SJ3");
        public final static Property Comment = new Property(21, String.class, "comment", false, "COMMENT");
        public final static Property AdministratorName = new Property(22, String.class, "administratorName", false, "ADMINISTRATOR_NAME");
        public final static Property ServerVersion = new Property(23, long.class, "serverVersion", false, "SERVER_VERSION");
        public final static Property ClientVersion = new Property(24, long.class, "clientVersion", false, "CLIENT_VERSION");
        public final static Property Key = new Property(25, int.class, "key", false, "KEY");
    }


    public PurchaseRecordModelDao(DaoConfig config) {
        super(config);
    }
    
    public PurchaseRecordModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PURCHASE_RECORD_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"PURCHASE_RECORD_ID\" TEXT," + // 1: purchaseRecordId
                "\"DEVICE_NO\" TEXT," + // 2: deviceNo
                "\"STATION_NO\" TEXT," + // 3: stationNo
                "\"USER_NAME\" TEXT," + // 4: userName
                "\"USER_NO\" TEXT," + // 5: userNo
                "\"PURCHASE_TOTAL_THIS_TIME\" TEXT," + // 6: purchaseTotalThisTime
                "\"PURCHASEA_MOUNT_THIS_TIME\" TEXT," + // 7: purchaseaMountThisTime
                "\"PURCHASE_DATETIME_THIS_TIME\" INTEGER," + // 8: purchaseDatetimeThisTime
                "\"PURCHASE_YEAR\" INTEGER," + // 9: purchaseYear
                "\"PURCHASE_TOTAL_THIS_YEAR\" TEXT," + // 10: purchaseTotalThisYear
                "\"PURCHASE_TOTAL\" TEXT," + // 11: purchaseTotal
                "\"PRICE_SJ1\" TEXT," + // 12: priceSj1
                "\"TOTAL_SJ1\" TEXT," + // 13: totalSj1
                "\"AMOUNT_SJ1\" TEXT," + // 14: amountSj1
                "\"PRICE_SJ2\" TEXT," + // 15: priceSj2
                "\"TOTAL_SJ2\" TEXT," + // 16: totalSj2
                "\"AMOUNT_SJ2\" TEXT," + // 17: amountSj2
                "\"PRICE_SJ3\" TEXT," + // 18: priceSj3
                "\"TOTAL_SJ3\" TEXT," + // 19: totalSj3
                "\"AMOUNT_SJ3\" TEXT," + // 20: amountSj3
                "\"COMMENT\" TEXT," + // 21: comment
                "\"ADMINISTRATOR_NAME\" TEXT," + // 22: administratorName
                "\"SERVER_VERSION\" INTEGER NOT NULL ," + // 23: serverVersion
                "\"CLIENT_VERSION\" INTEGER NOT NULL ," + // 24: clientVersion
                "\"KEY\" INTEGER NOT NULL );"); // 25: key
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PURCHASE_RECORD_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PurchaseRecordModel entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String purchaseRecordId = entity.getPurchaseRecordId();
        if (purchaseRecordId != null) {
            stmt.bindString(2, purchaseRecordId);
        }
 
        String deviceNo = entity.getDeviceNo();
        if (deviceNo != null) {
            stmt.bindString(3, deviceNo);
        }
 
        String stationNo = entity.getStationNo();
        if (stationNo != null) {
            stmt.bindString(4, stationNo);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
 
        String userNo = entity.getUserNo();
        if (userNo != null) {
            stmt.bindString(6, userNo);
        }
 
        String purchaseTotalThisTime = entity.getPurchaseTotalThisTime();
        if (purchaseTotalThisTime != null) {
            stmt.bindString(7, purchaseTotalThisTime);
        }
 
        String purchaseaMountThisTime = entity.getPurchaseaMountThisTime();
        if (purchaseaMountThisTime != null) {
            stmt.bindString(8, purchaseaMountThisTime);
        }
 
        java.util.Date purchaseDatetimeThisTime = entity.getPurchaseDatetimeThisTime();
        if (purchaseDatetimeThisTime != null) {
            stmt.bindLong(9, purchaseDatetimeThisTime.getTime());
        }
 
        Integer purchaseYear = entity.getPurchaseYear();
        if (purchaseYear != null) {
            stmt.bindLong(10, purchaseYear);
        }
 
        String purchaseTotalThisYear = entity.getPurchaseTotalThisYear();
        if (purchaseTotalThisYear != null) {
            stmt.bindString(11, purchaseTotalThisYear);
        }
 
        String purchaseTotal = entity.getPurchaseTotal();
        if (purchaseTotal != null) {
            stmt.bindString(12, purchaseTotal);
        }
 
        String priceSj1 = entity.getPriceSj1();
        if (priceSj1 != null) {
            stmt.bindString(13, priceSj1);
        }
 
        String totalSj1 = entity.getTotalSj1();
        if (totalSj1 != null) {
            stmt.bindString(14, totalSj1);
        }
 
        String amountSj1 = entity.getAmountSj1();
        if (amountSj1 != null) {
            stmt.bindString(15, amountSj1);
        }
 
        String priceSj2 = entity.getPriceSj2();
        if (priceSj2 != null) {
            stmt.bindString(16, priceSj2);
        }
 
        String totalSj2 = entity.getTotalSj2();
        if (totalSj2 != null) {
            stmt.bindString(17, totalSj2);
        }
 
        String amountSj2 = entity.getAmountSj2();
        if (amountSj2 != null) {
            stmt.bindString(18, amountSj2);
        }
 
        String priceSj3 = entity.getPriceSj3();
        if (priceSj3 != null) {
            stmt.bindString(19, priceSj3);
        }
 
        String totalSj3 = entity.getTotalSj3();
        if (totalSj3 != null) {
            stmt.bindString(20, totalSj3);
        }
 
        String amountSj3 = entity.getAmountSj3();
        if (amountSj3 != null) {
            stmt.bindString(21, amountSj3);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(22, comment);
        }
 
        String administratorName = entity.getAdministratorName();
        if (administratorName != null) {
            stmt.bindString(23, administratorName);
        }
        stmt.bindLong(24, entity.getServerVersion());
        stmt.bindLong(25, entity.getClientVersion());
        stmt.bindLong(26, entity.getKey());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PurchaseRecordModel entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String purchaseRecordId = entity.getPurchaseRecordId();
        if (purchaseRecordId != null) {
            stmt.bindString(2, purchaseRecordId);
        }
 
        String deviceNo = entity.getDeviceNo();
        if (deviceNo != null) {
            stmt.bindString(3, deviceNo);
        }
 
        String stationNo = entity.getStationNo();
        if (stationNo != null) {
            stmt.bindString(4, stationNo);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
 
        String userNo = entity.getUserNo();
        if (userNo != null) {
            stmt.bindString(6, userNo);
        }
 
        String purchaseTotalThisTime = entity.getPurchaseTotalThisTime();
        if (purchaseTotalThisTime != null) {
            stmt.bindString(7, purchaseTotalThisTime);
        }
 
        String purchaseaMountThisTime = entity.getPurchaseaMountThisTime();
        if (purchaseaMountThisTime != null) {
            stmt.bindString(8, purchaseaMountThisTime);
        }
 
        java.util.Date purchaseDatetimeThisTime = entity.getPurchaseDatetimeThisTime();
        if (purchaseDatetimeThisTime != null) {
            stmt.bindLong(9, purchaseDatetimeThisTime.getTime());
        }
 
        Integer purchaseYear = entity.getPurchaseYear();
        if (purchaseYear != null) {
            stmt.bindLong(10, purchaseYear);
        }
 
        String purchaseTotalThisYear = entity.getPurchaseTotalThisYear();
        if (purchaseTotalThisYear != null) {
            stmt.bindString(11, purchaseTotalThisYear);
        }
 
        String purchaseTotal = entity.getPurchaseTotal();
        if (purchaseTotal != null) {
            stmt.bindString(12, purchaseTotal);
        }
 
        String priceSj1 = entity.getPriceSj1();
        if (priceSj1 != null) {
            stmt.bindString(13, priceSj1);
        }
 
        String totalSj1 = entity.getTotalSj1();
        if (totalSj1 != null) {
            stmt.bindString(14, totalSj1);
        }
 
        String amountSj1 = entity.getAmountSj1();
        if (amountSj1 != null) {
            stmt.bindString(15, amountSj1);
        }
 
        String priceSj2 = entity.getPriceSj2();
        if (priceSj2 != null) {
            stmt.bindString(16, priceSj2);
        }
 
        String totalSj2 = entity.getTotalSj2();
        if (totalSj2 != null) {
            stmt.bindString(17, totalSj2);
        }
 
        String amountSj2 = entity.getAmountSj2();
        if (amountSj2 != null) {
            stmt.bindString(18, amountSj2);
        }
 
        String priceSj3 = entity.getPriceSj3();
        if (priceSj3 != null) {
            stmt.bindString(19, priceSj3);
        }
 
        String totalSj3 = entity.getTotalSj3();
        if (totalSj3 != null) {
            stmt.bindString(20, totalSj3);
        }
 
        String amountSj3 = entity.getAmountSj3();
        if (amountSj3 != null) {
            stmt.bindString(21, amountSj3);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(22, comment);
        }
 
        String administratorName = entity.getAdministratorName();
        if (administratorName != null) {
            stmt.bindString(23, administratorName);
        }
        stmt.bindLong(24, entity.getServerVersion());
        stmt.bindLong(25, entity.getClientVersion());
        stmt.bindLong(26, entity.getKey());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PurchaseRecordModel readEntity(Cursor cursor, int offset) {
        PurchaseRecordModel entity = new PurchaseRecordModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // purchaseRecordId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // stationNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // purchaseTotalThisTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // purchaseaMountThisTime
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // purchaseDatetimeThisTime
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // purchaseYear
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // purchaseTotalThisYear
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // purchaseTotal
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // priceSj1
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // totalSj1
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // amountSj1
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // priceSj2
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // totalSj2
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // amountSj2
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // priceSj3
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // totalSj3
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // amountSj3
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // comment
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // administratorName
            cursor.getLong(offset + 23), // serverVersion
            cursor.getLong(offset + 24), // clientVersion
            cursor.getInt(offset + 25) // key
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PurchaseRecordModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPurchaseRecordId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStationNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPurchaseTotalThisTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPurchaseaMountThisTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPurchaseDatetimeThisTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setPurchaseYear(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setPurchaseTotalThisYear(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPurchaseTotal(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPriceSj1(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTotalSj1(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAmountSj1(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPriceSj2(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTotalSj2(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAmountSj2(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPriceSj3(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTotalSj3(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAmountSj3(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setComment(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setAdministratorName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setServerVersion(cursor.getLong(offset + 23));
        entity.setClientVersion(cursor.getLong(offset + 24));
        entity.setKey(cursor.getInt(offset + 25));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PurchaseRecordModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PurchaseRecordModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PurchaseRecordModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
