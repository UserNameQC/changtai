package com.example.john.greendaodemo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.changtai.db.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property BureauNo = new Property(1, Long.class, "BureauNo", false, "BUREAU_NO");
        public final static Property StationNo = new Property(2, Long.class, "StationNo", false, "STATION_NO");
        public final static Property DeviceNo = new Property(3, Long.class, "DeviceNo", false, "DEVICE_NO");
        public final static Property UserNo = new Property(4, Long.class, "UserNo", false, "USER_NO");
        public final static Property Index = new Property(5, String.class, "Index", false, "INDEX");
        public final static Property UserName = new Property(6, String.class, "UserName", false, "USER_NAME");
        public final static Property Phone = new Property(7, String.class, "Phone", false, "PHONE");
        public final static Property CreateDateTime = new Property(8, String.class, "CreateDateTime", false, "CREATE_DATE_TIME");
        public final static Property Linkman = new Property(9, String.class, "Linkman", false, "LINKMAN");
        public final static Property SjId = new Property(10, String.class, "SjId", false, "SJ_ID");
        public final static Property UsedTotal = new Property(11, String.class, "UsedTotal", false, "USED_TOTAL");
        public final static Property PurchaseTotal = new Property(12, String.class, "PurchaseTotal", false, "PURCHASE_TOTAL");
        public final static Property PurchaseTotalThisYear = new Property(13, String.class, "PurchaseTotalThisYear", false, "PURCHASE_TOTAL_THIS_YEAR");
        public final static Property Overdraft = new Property(14, String.class, "Overdraft", false, "OVERDRAFT");
        public final static Property AlarmValue = new Property(15, String.class, "AlarmValue", false, "ALARM_VALUE");
        public final static Property CredentialNo = new Property(16, String.class, "CredentialNo", false, "CREDENTIAL_NO");
        public final static Property LimitSj1 = new Property(17, String.class, "LimitSj1", false, "LIMIT_SJ1");
        public final static Property LimitSj2 = new Property(18, String.class, "LimitSj2", false, "LIMIT_SJ2");
        public final static Property Comment = new Property(19, String.class, "Comment", false, "COMMENT");
        public final static Property AdministratorName = new Property(20, String.class, "AdministratorName", false, "ADMINISTRATOR_NAME");
        public final static Property StopFlag = new Property(21, String.class, "StopFlag", false, "STOP_FLAG");
        public final static Property CardNo = new Property(22, String.class, "CardNo", false, "CARD_NO");
        public final static Property CreditCardTimes = new Property(23, String.class, "CreditCardTimes", false, "CREDIT_CARD_TIMES");
        public final static Property TimeSpan = new Property(24, String.class, "TimeSpan", false, "TIME_SPAN");
        public final static Property LastDateTime = new Property(25, String.class, "LastDateTime", false, "LAST_DATE_TIME");
        public final static Property Version = new Property(26, String.class, "Version", false, "VERSION");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"BUREAU_NO\" INTEGER," + // 1: BureauNo
                "\"STATION_NO\" INTEGER," + // 2: StationNo
                "\"DEVICE_NO\" INTEGER," + // 3: DeviceNo
                "\"USER_NO\" INTEGER," + // 4: UserNo
                "\"INDEX\" TEXT," + // 5: Index
                "\"USER_NAME\" TEXT," + // 6: UserName
                "\"PHONE\" TEXT," + // 7: Phone
                "\"CREATE_DATE_TIME\" TEXT," + // 8: CreateDateTime
                "\"LINKMAN\" TEXT," + // 9: Linkman
                "\"SJ_ID\" TEXT," + // 10: SjId
                "\"USED_TOTAL\" TEXT," + // 11: UsedTotal
                "\"PURCHASE_TOTAL\" TEXT," + // 12: PurchaseTotal
                "\"PURCHASE_TOTAL_THIS_YEAR\" TEXT," + // 13: PurchaseTotalThisYear
                "\"OVERDRAFT\" TEXT," + // 14: Overdraft
                "\"ALARM_VALUE\" TEXT," + // 15: AlarmValue
                "\"CREDENTIAL_NO\" TEXT," + // 16: CredentialNo
                "\"LIMIT_SJ1\" TEXT," + // 17: LimitSj1
                "\"LIMIT_SJ2\" TEXT," + // 18: LimitSj2
                "\"COMMENT\" TEXT," + // 19: Comment
                "\"ADMINISTRATOR_NAME\" TEXT," + // 20: AdministratorName
                "\"STOP_FLAG\" TEXT," + // 21: StopFlag
                "\"CARD_NO\" TEXT," + // 22: CardNo
                "\"CREDIT_CARD_TIMES\" TEXT," + // 23: CreditCardTimes
                "\"TIME_SPAN\" TEXT," + // 24: TimeSpan
                "\"LAST_DATE_TIME\" TEXT," + // 25: LastDateTime
                "\"VERSION\" TEXT);"); // 26: Version
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Long BureauNo = entity.getBureauNo();
        if (BureauNo != null) {
            stmt.bindLong(2, BureauNo);
        }
 
        Long StationNo = entity.getStationNo();
        if (StationNo != null) {
            stmt.bindLong(3, StationNo);
        }
 
        Long DeviceNo = entity.getDeviceNo();
        if (DeviceNo != null) {
            stmt.bindLong(4, DeviceNo);
        }
 
        Long UserNo = entity.getUserNo();
        if (UserNo != null) {
            stmt.bindLong(5, UserNo);
        }
 
        String Index = entity.getIndex();
        if (Index != null) {
            stmt.bindString(6, Index);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(7, UserName);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(8, Phone);
        }
 
        String CreateDateTime = entity.getCreateDateTime();
        if (CreateDateTime != null) {
            stmt.bindString(9, CreateDateTime);
        }
 
        String Linkman = entity.getLinkman();
        if (Linkman != null) {
            stmt.bindString(10, Linkman);
        }
 
        String SjId = entity.getSjId();
        if (SjId != null) {
            stmt.bindString(11, SjId);
        }
 
        String UsedTotal = entity.getUsedTotal();
        if (UsedTotal != null) {
            stmt.bindString(12, UsedTotal);
        }
 
        String PurchaseTotal = entity.getPurchaseTotal();
        if (PurchaseTotal != null) {
            stmt.bindString(13, PurchaseTotal);
        }
 
        String PurchaseTotalThisYear = entity.getPurchaseTotalThisYear();
        if (PurchaseTotalThisYear != null) {
            stmt.bindString(14, PurchaseTotalThisYear);
        }
 
        String Overdraft = entity.getOverdraft();
        if (Overdraft != null) {
            stmt.bindString(15, Overdraft);
        }
 
        String AlarmValue = entity.getAlarmValue();
        if (AlarmValue != null) {
            stmt.bindString(16, AlarmValue);
        }
 
        String CredentialNo = entity.getCredentialNo();
        if (CredentialNo != null) {
            stmt.bindString(17, CredentialNo);
        }
 
        String LimitSj1 = entity.getLimitSj1();
        if (LimitSj1 != null) {
            stmt.bindString(18, LimitSj1);
        }
 
        String LimitSj2 = entity.getLimitSj2();
        if (LimitSj2 != null) {
            stmt.bindString(19, LimitSj2);
        }
 
        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(20, Comment);
        }
 
        String AdministratorName = entity.getAdministratorName();
        if (AdministratorName != null) {
            stmt.bindString(21, AdministratorName);
        }
 
        String StopFlag = entity.getStopFlag();
        if (StopFlag != null) {
            stmt.bindString(22, StopFlag);
        }
 
        String CardNo = entity.getCardNo();
        if (CardNo != null) {
            stmt.bindString(23, CardNo);
        }
 
        String CreditCardTimes = entity.getCreditCardTimes();
        if (CreditCardTimes != null) {
            stmt.bindString(24, CreditCardTimes);
        }
 
        String TimeSpan = entity.getTimeSpan();
        if (TimeSpan != null) {
            stmt.bindString(25, TimeSpan);
        }
 
        String LastDateTime = entity.getLastDateTime();
        if (LastDateTime != null) {
            stmt.bindString(26, LastDateTime);
        }
 
        String Version = entity.getVersion();
        if (Version != null) {
            stmt.bindString(27, Version);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Long BureauNo = entity.getBureauNo();
        if (BureauNo != null) {
            stmt.bindLong(2, BureauNo);
        }
 
        Long StationNo = entity.getStationNo();
        if (StationNo != null) {
            stmt.bindLong(3, StationNo);
        }
 
        Long DeviceNo = entity.getDeviceNo();
        if (DeviceNo != null) {
            stmt.bindLong(4, DeviceNo);
        }
 
        Long UserNo = entity.getUserNo();
        if (UserNo != null) {
            stmt.bindLong(5, UserNo);
        }
 
        String Index = entity.getIndex();
        if (Index != null) {
            stmt.bindString(6, Index);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(7, UserName);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(8, Phone);
        }
 
        String CreateDateTime = entity.getCreateDateTime();
        if (CreateDateTime != null) {
            stmt.bindString(9, CreateDateTime);
        }
 
        String Linkman = entity.getLinkman();
        if (Linkman != null) {
            stmt.bindString(10, Linkman);
        }
 
        String SjId = entity.getSjId();
        if (SjId != null) {
            stmt.bindString(11, SjId);
        }
 
        String UsedTotal = entity.getUsedTotal();
        if (UsedTotal != null) {
            stmt.bindString(12, UsedTotal);
        }
 
        String PurchaseTotal = entity.getPurchaseTotal();
        if (PurchaseTotal != null) {
            stmt.bindString(13, PurchaseTotal);
        }
 
        String PurchaseTotalThisYear = entity.getPurchaseTotalThisYear();
        if (PurchaseTotalThisYear != null) {
            stmt.bindString(14, PurchaseTotalThisYear);
        }
 
        String Overdraft = entity.getOverdraft();
        if (Overdraft != null) {
            stmt.bindString(15, Overdraft);
        }
 
        String AlarmValue = entity.getAlarmValue();
        if (AlarmValue != null) {
            stmt.bindString(16, AlarmValue);
        }
 
        String CredentialNo = entity.getCredentialNo();
        if (CredentialNo != null) {
            stmt.bindString(17, CredentialNo);
        }
 
        String LimitSj1 = entity.getLimitSj1();
        if (LimitSj1 != null) {
            stmt.bindString(18, LimitSj1);
        }
 
        String LimitSj2 = entity.getLimitSj2();
        if (LimitSj2 != null) {
            stmt.bindString(19, LimitSj2);
        }
 
        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(20, Comment);
        }
 
        String AdministratorName = entity.getAdministratorName();
        if (AdministratorName != null) {
            stmt.bindString(21, AdministratorName);
        }
 
        String StopFlag = entity.getStopFlag();
        if (StopFlag != null) {
            stmt.bindString(22, StopFlag);
        }
 
        String CardNo = entity.getCardNo();
        if (CardNo != null) {
            stmt.bindString(23, CardNo);
        }
 
        String CreditCardTimes = entity.getCreditCardTimes();
        if (CreditCardTimes != null) {
            stmt.bindString(24, CreditCardTimes);
        }
 
        String TimeSpan = entity.getTimeSpan();
        if (TimeSpan != null) {
            stmt.bindString(25, TimeSpan);
        }
 
        String LastDateTime = entity.getLastDateTime();
        if (LastDateTime != null) {
            stmt.bindString(26, LastDateTime);
        }
 
        String Version = entity.getVersion();
        if (Version != null) {
            stmt.bindString(27, Version);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // BureauNo
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // StationNo
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // DeviceNo
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // UserNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Index
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // UserName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CreateDateTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Linkman
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // SjId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // UsedTotal
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // PurchaseTotal
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // PurchaseTotalThisYear
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // Overdraft
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // AlarmValue
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // CredentialNo
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // LimitSj1
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // LimitSj2
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // Comment
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // AdministratorName
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // StopFlag
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // CardNo
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // CreditCardTimes
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // TimeSpan
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // LastDateTime
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26) // Version
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBureauNo(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStationNo(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDeviceNo(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setUserNo(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setIndex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreateDateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLinkman(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSjId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUsedTotal(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPurchaseTotal(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPurchaseTotalThisYear(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setOverdraft(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAlarmValue(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCredentialNo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLimitSj1(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLimitSj2(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setComment(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAdministratorName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setStopFlag(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCardNo(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCreditCardTimes(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setTimeSpan(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setLastDateTime(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setVersion(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
