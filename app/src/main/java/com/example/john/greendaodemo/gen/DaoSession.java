package com.example.john.greendaodemo.gen;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.changtai.newDao.ConfigDao;
import com.changtai.newDao.DBEntityDao;
import com.changtai.newDao.DeviceDao;
import com.changtai.newDao.LoginDao;
import com.changtai.newDao.LoginInformationDao;
import com.changtai.newDao.PriceDao;
import com.changtai.newDao.PurchaseRecordDao;
import com.changtai.newDao.UserDao;

import com.example.john.greendaodemo.gen.ConfigDaoDao;
import com.example.john.greendaodemo.gen.DBEntityDaoDao;
import com.example.john.greendaodemo.gen.DeviceDaoDao;
import com.example.john.greendaodemo.gen.LoginDaoDao;
import com.example.john.greendaodemo.gen.LoginInformationDaoDao;
import com.example.john.greendaodemo.gen.PriceDaoDao;
import com.example.john.greendaodemo.gen.PurchaseRecordDaoDao;
import com.example.john.greendaodemo.gen.UserDaoDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig configDaoDaoConfig;
    private final DaoConfig dBEntityDaoDaoConfig;
    private final DaoConfig deviceDaoDaoConfig;
    private final DaoConfig loginDaoDaoConfig;
    private final DaoConfig loginInformationDaoDaoConfig;
    private final DaoConfig priceDaoDaoConfig;
    private final DaoConfig purchaseRecordDaoDaoConfig;
    private final DaoConfig userDaoDaoConfig;

    private final ConfigDaoDao configDaoDao;
    private final DBEntityDaoDao dBEntityDaoDao;
    private final DeviceDaoDao deviceDaoDao;
    private final LoginDaoDao loginDaoDao;
    private final LoginInformationDaoDao loginInformationDaoDao;
    private final PriceDaoDao priceDaoDao;
    private final PurchaseRecordDaoDao purchaseRecordDaoDao;
    private final UserDaoDao userDaoDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        configDaoDaoConfig = daoConfigMap.get(ConfigDaoDao.class).clone();
        configDaoDaoConfig.initIdentityScope(type);

        dBEntityDaoDaoConfig = daoConfigMap.get(DBEntityDaoDao.class).clone();
        dBEntityDaoDaoConfig.initIdentityScope(type);

        deviceDaoDaoConfig = daoConfigMap.get(DeviceDaoDao.class).clone();
        deviceDaoDaoConfig.initIdentityScope(type);

        loginDaoDaoConfig = daoConfigMap.get(LoginDaoDao.class).clone();
        loginDaoDaoConfig.initIdentityScope(type);

        loginInformationDaoDaoConfig = daoConfigMap.get(LoginInformationDaoDao.class).clone();
        loginInformationDaoDaoConfig.initIdentityScope(type);

        priceDaoDaoConfig = daoConfigMap.get(PriceDaoDao.class).clone();
        priceDaoDaoConfig.initIdentityScope(type);

        purchaseRecordDaoDaoConfig = daoConfigMap.get(PurchaseRecordDaoDao.class).clone();
        purchaseRecordDaoDaoConfig.initIdentityScope(type);

        userDaoDaoConfig = daoConfigMap.get(UserDaoDao.class).clone();
        userDaoDaoConfig.initIdentityScope(type);

        configDaoDao = new ConfigDaoDao(configDaoDaoConfig, this);
        dBEntityDaoDao = new DBEntityDaoDao(dBEntityDaoDaoConfig, this);
        deviceDaoDao = new DeviceDaoDao(deviceDaoDaoConfig, this);
        loginDaoDao = new LoginDaoDao(loginDaoDaoConfig, this);
        loginInformationDaoDao = new LoginInformationDaoDao(loginInformationDaoDaoConfig, this);
        priceDaoDao = new PriceDaoDao(priceDaoDaoConfig, this);
        purchaseRecordDaoDao = new PurchaseRecordDaoDao(purchaseRecordDaoDaoConfig, this);
        userDaoDao = new UserDaoDao(userDaoDaoConfig, this);

        registerDao(ConfigDao.class, configDaoDao);
        registerDao(DBEntityDao.class, dBEntityDaoDao);
        registerDao(DeviceDao.class, deviceDaoDao);
        registerDao(LoginDao.class, loginDaoDao);
        registerDao(LoginInformationDao.class, loginInformationDaoDao);
        registerDao(PriceDao.class, priceDaoDao);
        registerDao(PurchaseRecordDao.class, purchaseRecordDaoDao);
        registerDao(UserDao.class, userDaoDao);
    }
    
    public void clear() {
        configDaoDaoConfig.getIdentityScope().clear();
        dBEntityDaoDaoConfig.getIdentityScope().clear();
        deviceDaoDaoConfig.getIdentityScope().clear();
        loginDaoDaoConfig.getIdentityScope().clear();
        loginInformationDaoDaoConfig.getIdentityScope().clear();
        priceDaoDaoConfig.getIdentityScope().clear();
        purchaseRecordDaoDaoConfig.getIdentityScope().clear();
        userDaoDaoConfig.getIdentityScope().clear();
    }

    public ConfigDaoDao getConfigDaoDao() {
        return configDaoDao;
    }

    public DBEntityDaoDao getDBEntityDaoDao() {
        return dBEntityDaoDao;
    }

    public DeviceDaoDao getDeviceDaoDao() {
        return deviceDaoDao;
    }

    public LoginDaoDao getLoginDaoDao() {
        return loginDaoDao;
    }

    public LoginInformationDaoDao getLoginInformationDaoDao() {
        return loginInformationDaoDao;
    }

    public PriceDaoDao getPriceDaoDao() {
        return priceDaoDao;
    }

    public PurchaseRecordDaoDao getPurchaseRecordDaoDao() {
        return purchaseRecordDaoDao;
    }

    public UserDaoDao getUserDaoDao() {
        return userDaoDao;
    }

}
